
//ОООООООООООООООООООООООООООООООО ОПОВЕЩЕНИЯ ОБ ОПЛАТЕ ЗАКАЗА НАЧАЛО
#Область ОбработкаСобытияОплатыЗаказаКлиента

Процедура ОбработатьСобытиеОплатыЗаказаКлиента(ТаблицаОбъектовОплаты, ДополнительныеСвойства) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		ВключенаОтправкаSMS = Истина;
		ВключенаРаботаСПочтовымиСообщениями = Истина;
	Иначе
		ВключенаРаботаСПочтовымиСообщениями = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
		ВключенаОтправкаSMS = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS");
	КонецЕсли;
	
	СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить("Обработка.ОповещенияПриРаботеСЗаказами.Форма.Форма","СтруктураНастроек");
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		ТаблицаШаблонов = СтруктураНастроек.ТаблицаШаблонов;
		ПредопределенныеВидыОповещений = СоздатьПредопределенныеШаблоныСообщений();
		Если ПредопределенныеВидыОповещений.Количество() > 0 Тогда
			НадоСохранить = Ложь;
			Для Каждого СтрокаТаблицы Из ТаблицаШаблонов Цикл
				Если СокрЛП(СтрокаТаблицы.ГруппаРассылокИОповещений.Наименование) = "" Тогда
					Для Каждого ВидОповещения Из ПредопределенныеВидыОповещений Цикл
						Если СокрЛП(СтрокаТаблицы.НаименованиеГруппыРассылокИОповещений) = СокрЛП(ВидОповещения.ГруппаРассылокИОповещений.Наименование) Тогда
							СтрокаТаблицы.ГруппаРассылокИОповещений = ВидОповещения.ГруппаРассылокИОповещений;
							СтрокаТаблицы.ТипСобытия	= "Оплата";	
							НадоСохранить				= Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если СокрЛП(СтрокаТаблицы.ВидОповещения.Наименование) = "" Тогда
					Для Каждого ВидОповещения Из ПредопределенныеВидыОповещений Цикл
						Если СокрЛП(СтрокаТаблицы.НаименованиеВидаОповещения) = СокрЛП(ВидОповещения.Наименование) Тогда
							СтрокаТаблицы.ВидОповещения = ВидОповещения;
							СтрокаТаблицы.ТипСобытия	= "Оплата";	
							НадоСохранить = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если СокрЛП(СтрокаТаблицы.Шаблон.Наименование) = "" Тогда
					Для Каждого ВидОповещения Из ПредопределенныеВидыОповещений Цикл
						Если ВидОповещения.ПредназначенаДляSMS Тогда
							Шаблон = ВидОповещения.ШаблонСообщенияSMS;
						Иначе	
							Шаблон = ВидОповещения.ШаблонЭлектронногоПисьма;
						КонецЕсли;
						Если СокрЛП(СтрокаТаблицы.НаименованиеШаблона) = СокрЛП(Шаблон.Наименование) Тогда
							СтрокаТаблицы.Шаблон 		= Шаблон;
							СтрокаТаблицы.ТипСобытия	= "Оплата";	
							НадоСохранить = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если НадоСохранить Тогда
				СпрПользователи = Справочники.Пользователи.Выбрать();
				Пока СпрПользователи.Следующий() Цикл
					Если СпрПользователи.Служебный Тогда
						Продолжить;
					КонецЕсли;
					ПользИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(СпрПользователи.ИдентификаторПользователяИБ);
					Если ПользИБ = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ХранилищеОбщихНастроек.Сохранить("Обработка.ОповещенияПриРаботеСЗаказами.Форма.Форма","СтруктураНастроек", СтруктураНастроек,, ПользИБ.Имя);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Попытка
			СоздаватьЗадачиМенеджерамПриПолныхОплатахЗаказов		= СтруктураНастроек.СоздаватьЗадачиМенеджерамПриПолныхОплатахЗаказов;
		Исключение
			СоздаватьЗадачиМенеджерамПриПолныхОплатахЗаказов		= Ложь;
		КонецПопытки;
		СтруктураПоискаШаблона		= Новый Структура("ТипСобытия,Использовать", "Оплата", Истина); 
		МассивДействующихШаблонов	= ТаблицаШаблонов.НайтиСтроки(СтруктураПоискаШаблона);
		Если (МассивДействующихШаблонов.Количество() = 0) И (Не СоздаватьЗадачиМенеджерамПриПолныхОплатахЗаказов) Тогда
			Возврат;
		КонецЕсли;
		Попытка
			ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату		= СтруктураНастроек.ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату;
		Исключение
			ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату		= Ложь;
		КонецПопытки;
		Попытка
			ОтправлятьОповещенияКлиентамПриОплатеЗаказовНаличными	= СтруктураНастроек.ОтправлятьОповещенияКлиентамПриОплатеЗаказовНаличными;
		Исключение
			ОтправлятьОповещенияКлиентамПриОплатеЗаказовНаличными	= Ложь;
		КонецПопытки;
	Иначе
		Возврат;
	КонецЕсли;

	СтруктураПоиска = Новый Структура("Заказ, СуммаОплаты"); 
	
	МассивЗаказов = ТаблицаОбъектовОплаты.ВыгрузитьКолонку("Заказ");
	ТаблицаСостоянийЗаказов = СформироватьТаблицуСостоянийЗаказов(МассивЗаказов);
	
	Для Каждого СтрокаТаблицы из ТаблицаОбъектовОплаты Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		МассивДействующихСостояний = ТаблицаСостоянийЗаказов.НайтиСтроки(СтруктураПоиска);
		
		СостояниеНеИзменено = Булево(МассивДействующихСостояний.Количество());
		Если СостояниеНеИзменено Тогда
			Продолжить;
		КонецЕсли;
		
		Заказ = СтрокаТаблицы.Заказ;
		
		НайденнаяСтрока = ТаблицаСостоянийЗаказов.Найти(Заказ);
		
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НайденнаяСтрока.ПроцентОтгрузки > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//Если (НЕ СтрокаТаблицы.СуммаОплаты = 0)
		//   И (НайденнаяСтрока.СуммаОплаты < СтрокаТаблицы.СуммаОплаты) Тогда
		Если НайденнаяСтрока.СуммаОплаты < СтрокаТаблицы.СуммаОплаты Тогда
			Продолжить;
		КонецЕсли;
//ВОЗВРАТ;		
		
		Если Заказ.Менеджер.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Регистратор = СтрокаТаблицы.Регистратор;	
		
		ОкруглитьПроценты(НайденнаяСтрока.ПроцентОтгрузки);
		ОкруглитьПроценты(НайденнаяСтрока.ПроцентОплаты);
		ОкруглитьПроценты(НайденнаяСтрока.ПроцентДолга);
		
		//Посчитаем процент предоплаты по заказу
		ПроцентЗК = 0;
		Для каждого Этап из Заказ.ЭтапыГрафикаОплаты Цикл
			
			Если Этап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения
			 ИЛИ Этап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
				ПроцентЗК = ПроцентЗК + Этап.ПроцентПлатежа;
			КонецЕсли;
			
		КонецЦикла;
		
		Если (СтрокаТаблицы.Сумма <> 0) Тогда
			
			СуммаЗК = Заказ.СуммаДокумента * ПроцентЗК / 100;
		
			Если Заказ.Менеджер = ПараметрыСеанса.ТекущийПользователь Тогда
				
			ИначеЕсли (ПроцентЗК <= НайденнаяСтрока.ПроцентОплаты) И СоздаватьЗадачиМенеджерамПриПолныхОплатахЗаказов Тогда
				
				СоздатьЗадачуПриПолнойОплате(Заказ, НайденнаяСтрока.СуммаОплаты, СуммаЗК);
				
			КонецЕсли;

			Комментарий = "Оплата заказа клиента";
			Тема		= "Оплата заказа клиента";
 
			Если ВключенаОтправкаSMS Тогда  
				Если (ТипЗнч(Регистратор) <> Тип("ДокументСсылка.ПриходныйКассовыйОрдер"))
					ИЛИ ОтправлятьОповещенияКлиентамПриОплатеЗаказовНаличными Тогда
					ОтправлятьSMS = Истина;
					Если (НайденнаяСтрока.ПроцентОплаты < 100) Тогда
						СтруктураПоискаШаблона = Новый Структура("НаименованиеВидаОповещения,Использовать", "Частичная оплата заказа (SMS клиенту)", Истина); 
						МассивДействующихШаблонов = ТаблицаШаблонов.НайтиСтроки(СтруктураПоискаШаблона);
						Если МассивДействующихШаблонов.Количество() > 0 Тогда
							Комментарий		= МассивДействующихШаблонов[0].Шаблон.Наименование;
							ТекстСообщения	= МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаSMS;
							Если НЕ ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату Тогда
								ТекстСообщения = СтрЗаменить(ТекстСообщения, " [ЗаказКлиента.КонтактноеЛицоНаименование]","");
								ТекстСообщения = СтрЗаменить(ТекстСообщения, " !","!");
							КонецЕсли;
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ДатаОплаты]",			Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy"));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.СуммаОплачено]",		СокрЛП(СтрокаТаблицы.Сумма));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Номер]",				СокрЛП(Заказ.Номер));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Дата]",					Формат(Заказ.Дата,"ДФ=dd.MM.yyyy"));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ОставщийсяДолгКлиента]",СокрЛП(Заказ.СуммаДокумента - НайденнаяСтрока.СуммаОплаты));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Менеджер]",				СокрЛП(Заказ.Менеджер));
							ТелефонОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказ.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,Заказ.Дата, Истина);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ТелефонОрганизации]",	СокрЛП(ТелефонОрганизации));
						Иначе	
							ОтправлятьSMS = Ложь;
							//ТекстСообщения = "Добрый день!
							//|От Вас поступила оплата:
							//|" + Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy") + "г.;" + " сумма " + СокрЛП(СтрокаТаблицы.Сумма) + " руб.;
							//|оплата заказа " + СокрЛП(Заказ.Номер) + " от " + Формат(Заказ.Дата,"ДФ=dd.MM.yyyy") + "г.
							//|Оставшаяся сумма платежа = " + СокрЛП(Заказ.СуммаДокумента - НайденнаяСтрока.СуммаОплаты) + " руб.				
							////|в т.ч. НДС 18% " + Заказ.Номер + " руб.
							//|";
						КонецЕсли;
					Иначе
						СтруктураПоискаШаблона = Новый Структура("НаименованиеВидаОповещения,Использовать", "Полная оплата заказа (SMS клиенту)", Истина); 
						МассивДействующихШаблонов = ТаблицаШаблонов.НайтиСтроки(СтруктураПоискаШаблона);
						Если МассивДействующихШаблонов.Количество() > 0 Тогда
							Комментарий		= МассивДействующихШаблонов[0].Шаблон.Наименование;
							ТекстСообщения	= МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаSMS;
							Если НЕ ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату Тогда
								ТекстСообщения = СтрЗаменить(ТекстСообщения, " [ЗаказКлиента.КонтактноеЛицоНаименование]","");
								ТекстСообщения = СтрЗаменить(ТекстСообщения, " !","!");
							КонецЕсли;
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ДатаОплаты]",			Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy"));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.СуммаОплачено]",		СокрЛП(СтрокаТаблицы.Сумма));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Номер]",				СокрЛП(Заказ.Номер));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Дата]",					Формат(Заказ.Дата,"ДФ=dd.MM.yyyy"));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ОставщийсяДолгКлиента]",СокрЛП(Заказ.СуммаДокумента - НайденнаяСтрока.СуммаОплаты));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Менеджер]",				СокрЛП(Заказ.Менеджер));
							ТелефонОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказ.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,Заказ.Дата, Истина);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ТелефонОрганизации]",	СокрЛП(ТелефонОрганизации));
						Иначе	
							ОтправлятьSMS = Ложь;
						//ТекстСообщения = "Добрый день!
						//	|От Вас поступила оплата:
						//	|" + Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy") + "г.;" + " сумма " + СокрЛП(СтрокаТаблицы.Сумма) + " руб.;
						//	|оплата заказа " + СокрЛП(Заказ.Номер) + " от " + Формат(Заказ.Дата,"ДФ=dd.MM.yyyy") + "г.
						//	//|в т.ч. НДС 18% " + Заказ.Номер + " руб.
						//	|";
						КонецЕсли;
					КонецЕсли;
					Если ОтправлятьSMS Тогда
						ДополнительныеПараметры = Новый Структура("ТипСобытия,ДляКого,ТекстСообщения,ВидСообщения,Регистратор,ОтправитьСразу,Тема,Комментарий,
																  |СтрокаТаблицыШаблонов,ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату",
																   "Оплата", "Для клиента", ТекстСообщения, "СообщениеSMS", Регистратор, Истина, Тема, Комментарий,
																  МассивДействующихШаблонов[0], ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату);
						ПараметрыОтправки		= СформироватьПараметрыОтправки(Справочники.ШаблоныСообщений.ПустаяСсылка(),
													   		Заказ, Новый УникальныйИдентификатор, ДополнительныеПараметры);
						СформироватьСообщениеИОтправить(ПараметрыОтправки);
					КонецЕсли;
				КонецЕсли;
				ОтправлятьSMS = Истина;
				Если (НайденнаяСтрока.ПроцентОплаты < 100) Тогда
					СтруктураПоискаШаблона = Новый Структура("НаименованиеВидаОповещения,Использовать", "Частичная оплата заказа (SMS менеджеру)", Истина); 
					МассивДействующихШаблонов = ТаблицаШаблонов.НайтиСтроки(СтруктураПоискаШаблона);
					Если МассивДействующихШаблонов.Количество() > 0 Тогда
						Комментарий	   = МассивДействующихШаблонов[0].Шаблон.Наименование;
						ТекстСообщения = МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаSMS;
						ТекстСообщения = СтрЗаменить(ТекстСообщения, " [ЗаказКлиента.КонтактноеЛицоНаименование]","");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, " !","!");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ДатаОплаты]",			Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy"));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.СуммаОплачено]",		СокрЛП(СтрокаТаблицы.Сумма));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Номер]",				СокрЛП(Заказ.Номер));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Дата]",					Формат(Заказ.Дата,"ДФ=dd.MM.yyyy"));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ОставщийсяДолгКлиента]",СокрЛП(Заказ.СуммаДокумента - НайденнаяСтрока.СуммаОплаты));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Менеджер]",				СокрЛП(Заказ.Менеджер));
						ТелефонОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказ.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,Заказ.Дата, Истина);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ТелефонОрганизации]",	СокрЛП(ТелефонОрганизации));
					Иначе	
						ОтправлятьSMS = Ложь;
						//ТекстСообщения = "Поступила оплата:
						//|" + Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy") + "г.;" + " сумма " + СокрЛП(СтрокаТаблицы.Сумма) + " руб.;
						//|Заказ № " + СокрЛП(Заказ.Номер) + " от " + Формат(Заказ.Дата,"ДФ=dd.MM.yyyy") + "г.
						//|Оставшаяся сумма платежа = " + СокрЛП(Заказ.СуммаДокумента - НайденнаяСтрока.СуммаОплаты) + " руб.				
						////|в т.ч. НДС 18% " + Заказ.Номер + " руб.
						//|";
					КонецЕсли;
				Иначе
					СтруктураПоискаШаблона = Новый Структура("НаименованиеВидаОповещения,Использовать", "Полная оплата заказа (SMS менеджеру)", Истина); 
					МассивДействующихШаблонов = ТаблицаШаблонов.НайтиСтроки(СтруктураПоискаШаблона);
					Если МассивДействующихШаблонов.Количество() > 0 Тогда
						Комментарий	   = МассивДействующихШаблонов[0].Шаблон.Наименование;
						ТекстСообщения = МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаSMS;
						ТекстСообщения = СтрЗаменить(ТекстСообщения, " [ЗаказКлиента.КонтактноеЛицоНаименование]","");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, " !","!");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ДатаОплаты]",			Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy"));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.СуммаОплачено]",		СокрЛП(СтрокаТаблицы.Сумма));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Номер]",				СокрЛП(Заказ.Номер));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Дата]",					Формат(Заказ.Дата,"ДФ=dd.MM.yyyy"));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ОставщийсяДолгКлиента]",СокрЛП(Заказ.СуммаДокумента - НайденнаяСтрока.СуммаОплаты));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Менеджер]",				СокрЛП(Заказ.Менеджер));
						ТелефонОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказ.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,Заказ.Дата, Истина);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ТелефонОрганизации]",	СокрЛП(ТелефонОрганизации));
					Иначе	
						ОтправлятьSMS = Ложь;
						//ТекстСообщения = "Поступила оплата:
						//|" + Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy") + "г.;" + " сумма " + СокрЛП(СтрокаТаблицы.Сумма) + " руб.;
						//|Заказ № " + СокрЛП(Заказ.Номер) + " от " + Формат(Заказ.Дата,"ДФ=dd.MM.yyyy") + "г.
						////|в т.ч. НДС 18% " + Заказ.Номер + " руб.
						//|";
					КонецЕсли;
				КонецЕсли;
				Если ОтправлятьSMS Тогда
					ДополнительныеПараметры = Новый Структура("ТипСобытия,ДляКого,ТекстСообщения,ВидСообщения,Регистратор,ОтправитьСразу,Тема,Комментарий,СтрокаТаблицыШаблонов",
															  "Оплата", "Для менеджера", ТекстСообщения, "СообщениеSMS", Регистратор, Истина, Тема, Комментарий, МассивДействующихШаблонов[0]);
					ПараметрыОтправки		= СформироватьПараметрыОтправки(Справочники.ШаблоныСообщений.ПустаяСсылка(),
												   		Заказ, Новый УникальныйИдентификатор, ДополнительныеПараметры);
					СформироватьСообщениеИОтправить(ПараметрыОтправки);
				КонецЕсли;
			КонецЕсли;
			Если ВключенаРаботаСПочтовымиСообщениями Тогда
				Если (ТипЗнч(Регистратор) <> Тип("ДокументСсылка.ПриходныйКассовыйОрдер"))
					ИЛИ ОтправлятьОповещенияКлиентамПриОплатеЗаказовНаличными Тогда
					ОтправлятьПисьма = Истина;
					Если (НайденнаяСтрока.ПроцентОплаты < 100) Тогда
						СтруктураПоискаШаблона = Новый Структура("НаименованиеВидаОповещения,Использовать", "Частичная оплата заказа (e-mail клиенту)", Истина); 
						МассивДействующихШаблонов = ТаблицаШаблонов.НайтиСтроки(СтруктураПоискаШаблона);
						Если МассивДействующихШаблонов.Количество() > 0 Тогда
							Комментарий		= МассивДействующихШаблонов[0].Шаблон.Наименование;
							ТипТекстаПисьма = МассивДействующихШаблонов[0].Шаблон.ТипТекстаПисьма;
							Если ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
								ТекстСообщения = МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаПисьма;
							Иначе	
								ТекстСообщения = МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаПисьмаHTML;
							КонецЕсли;
							Если НЕ ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату Тогда
								ТекстСообщения = СтрЗаменить(ТекстСообщения, " [ЗаказКлиента.КонтактноеЛицоНаименование]","");
								ТекстСообщения = СтрЗаменить(ТекстСообщения, " !","!");
							КонецЕсли;
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ДатаОплаты]",			Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy"));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.СуммаОплачено]",		СокрЛП(СтрокаТаблицы.Сумма));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Номер]",				СокрЛП(Заказ.Номер));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Дата]",					Формат(Заказ.Дата,"ДФ=dd.MM.yyyy"));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ОставщийсяДолгКлиента]",СокрЛП(Заказ.СуммаДокумента - НайденнаяСтрока.СуммаОплаты));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Менеджер]",				СокрЛП(Заказ.Менеджер));
							ТелефонОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказ.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,Заказ.Дата, Истина);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ТелефонОрганизации]",	СокрЛП(ТелефонОрганизации));
						Иначе	
							ОтправлятьПисьма = Ложь;
							//ТекстСообщения = "Добрый день!
							//|От Вас поступила оплата:
							//|" + Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy") + "г.;" + " сумма " + СокрЛП(СтрокаТаблицы.Сумма) + " руб.;
							//|оплата заказа " + СокрЛП(Заказ.Номер) + " от " + Формат(Заказ.Дата,"ДФ=dd.MM.yyyy") + "г.
							//|Оставшаяся сумма платежа = " + СокрЛП(Заказ.СуммаДокумента - НайденнаяСтрока.СуммаОплаты) + " руб.				
							////|в т.ч. НДС 18% " + Заказ.Номер + " руб.
							//|";
							//ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
						КонецЕсли;
					Иначе
						СтруктураПоискаШаблона = Новый Структура("НаименованиеВидаОповещения,Использовать", "Полная оплата заказа (e-mail клиенту)", Истина); 
						МассивДействующихШаблонов = ТаблицаШаблонов.НайтиСтроки(СтруктураПоискаШаблона);
						Если МассивДействующихШаблонов.Количество() > 0 Тогда
							Комментарий		= МассивДействующихШаблонов[0].Шаблон.Наименование;
							ТипТекстаПисьма = МассивДействующихШаблонов[0].Шаблон.ТипТекстаПисьма;
							Если ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
								ТекстСообщения = МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаПисьма;
							Иначе	
								ТекстСообщения = МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаПисьмаHTML;
							КонецЕсли;
							Если НЕ ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату Тогда
								ТекстСообщения = СтрЗаменить(ТекстСообщения, " [ЗаказКлиента.КонтактноеЛицоНаименование]","");
								ТекстСообщения = СтрЗаменить(ТекстСообщения, " !","!");
							КонецЕсли;
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ДатаОплаты]",			Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy"));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.СуммаОплачено]",		СокрЛП(СтрокаТаблицы.Сумма));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Номер]",				СокрЛП(Заказ.Номер));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Дата]",					Формат(Заказ.Дата,"ДФ=dd.MM.yyyy"));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ОставщийсяДолгКлиента]",СокрЛП(Заказ.СуммаДокумента - НайденнаяСтрока.СуммаОплаты));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Менеджер]",				СокрЛП(Заказ.Менеджер));
							ТелефонОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказ.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,Заказ.Дата, Истина);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ТелефонОрганизации]",	СокрЛП(ТелефонОрганизации));
						Иначе	
							ОтправлятьПисьма = Ложь;
							//ТекстСообщения = "Добрый день!
							//|От Вас поступила оплата:
							//|" + Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy") + "г.;" + " сумма " + СокрЛП(СтрокаТаблицы.Сумма) + " руб.;
							//|оплата заказа " + СокрЛП(Заказ.Номер) + " от " + Формат(Заказ.Дата,"ДФ=dd.MM.yyyy") + "г.
							////|в т.ч. НДС 18% " + Заказ.Номер + " руб.
							//|";
							//ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
						КонецЕсли;
					КонецЕсли;
					Если ОтправлятьПисьма Тогда
						ДополнительныеПараметры = Новый Структура("ТипСобытия,ДляКого,ТекстСообщения,ВидСообщения,Регистратор,ОтправитьСразу,Тема,Комментарий,
																  |СтрокаТаблицыШаблонов,ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату,ФорматПисьма",
																  "Оплата", "Для клиента", ТекстСообщения, "Письмо", Регистратор, Истина, Тема, Комментарий,
																   МассивДействующихШаблонов[0], ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату, ТипТекстаПисьма);
						ПараметрыОтправки		= СформироватьПараметрыОтправки(Справочники.ШаблоныСообщений.ПустаяСсылка(),
													   		Заказ, Новый УникальныйИдентификатор, ДополнительныеПараметры);
						СформироватьСообщениеИОтправить(ПараметрыОтправки);
					КонецЕсли;
				КонецЕсли;
				ОтправлятьПисьма = Истина;
				Если (НайденнаяСтрока.ПроцентОплаты < 100) Тогда
					СтруктураПоискаШаблона = Новый Структура("НаименованиеВидаОповещения,Использовать", "Частичная оплата заказа (e-mail менеджеру)", Истина); 
					МассивДействующихШаблонов = ТаблицаШаблонов.НайтиСтроки(СтруктураПоискаШаблона);
					Если МассивДействующихШаблонов.Количество() > 0 Тогда
						Комментарий		= МассивДействующихШаблонов[0].Шаблон.Наименование;
						ТипТекстаПисьма = МассивДействующихШаблонов[0].Шаблон.ТипТекстаПисьма;
						Если ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
							ТекстСообщения = МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаПисьма;
						Иначе	
							ТекстСообщения = МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаПисьмаHTML;
						КонецЕсли;
						ТекстСообщения = СтрЗаменить(ТекстСообщения, " [ЗаказКлиента.КонтактноеЛицоНаименование]","");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, " !","!");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ДатаОплаты]",			Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy"));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.СуммаОплачено]",		СокрЛП(СтрокаТаблицы.Сумма));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Номер]",				СокрЛП(Заказ.Номер));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Дата]",					Формат(Заказ.Дата,"ДФ=dd.MM.yyyy"));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ОставщийсяДолгКлиента]",СокрЛП(Заказ.СуммаДокумента - НайденнаяСтрока.СуммаОплаты));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Менеджер]",				СокрЛП(Заказ.Менеджер));
						ТелефонОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказ.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,Заказ.Дата, Истина);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ТелефонОрганизации]",	СокрЛП(ТелефонОрганизации));
					Иначе	
						ОтправлятьПисьма = Ложь;
						//ТекстСообщения = "Поступила оплата:
						//|" + Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy") + "г.;" + " сумма " + СокрЛП(СтрокаТаблицы.Сумма) + " руб.;
						//|Заказ № " + СокрЛП(Заказ.Номер) + " от " + Формат(Заказ.Дата,"ДФ=dd.MM.yyyy") + "г.
						//|Оставшаяся сумма платежа = " + СокрЛП(Заказ.СуммаДокумента - НайденнаяСтрока.СуммаОплаты) + " руб.				
						////|в т.ч. НДС 18% " + Заказ.Номер + " руб.
						//|";
						//ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
					КонецЕсли;
				Иначе
					СтруктураПоискаШаблона = Новый Структура("НаименованиеВидаОповещения,Использовать", "Полная оплата заказа (e-mail менеджеру)", Истина); 
					МассивДействующихШаблонов = ТаблицаШаблонов.НайтиСтроки(СтруктураПоискаШаблона);
					Если МассивДействующихШаблонов.Количество() > 0 Тогда
						Комментарий		= МассивДействующихШаблонов[0].Шаблон.Наименование;
						ТипТекстаПисьма = МассивДействующихШаблонов[0].Шаблон.ТипТекстаПисьма;
						Если ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
							ТекстСообщения = МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаПисьма;
						Иначе	
							ТекстСообщения = МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаПисьмаHTML;
						КонецЕсли;
						ТекстСообщения = СтрЗаменить(ТекстСообщения, " [ЗаказКлиента.КонтактноеЛицоНаименование]","");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, " !","!");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ДатаОплаты]",			Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy"));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.СуммаОплачено]",		СокрЛП(СтрокаТаблицы.Сумма));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Номер]",				СокрЛП(Заказ.Номер));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Дата]",					Формат(Заказ.Дата,"ДФ=dd.MM.yyyy"));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ОставщийсяДолгКлиента]",СокрЛП(Заказ.СуммаДокумента - НайденнаяСтрока.СуммаОплаты));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Менеджер]",				СокрЛП(Заказ.Менеджер));
						ТелефонОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказ.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,Заказ.Дата, Истина);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ТелефонОрганизации]",	СокрЛП(ТелефонОрганизации));
					Иначе	
						ОтправлятьПисьма = Ложь;
						//ТекстСообщения = "Поступила оплата:
						//|" + Формат(Регистратор.Дата,"ДФ=dd.MM.yyyy") + "г.;" + " сумма " + СокрЛП(СтрокаТаблицы.Сумма) + " руб.;
						//|Заказ № " + СокрЛП(Заказ.Номер) + " от " + Формат(Заказ.Дата,"ДФ=dd.MM.yyyy") + "г.
						////|в т.ч. НДС 18% " + Заказ.Номер + " руб.
						//|";
						//ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
					КонецЕсли;
				КонецЕсли;
				Если ОтправлятьПисьма Тогда
					ДополнительныеПараметры = Новый Структура("ТипСобытия,ДляКого,ТекстСообщения,ВидСообщения,Регистратор,ОтправитьСразу,Тема,Комментарий,СтрокаТаблицыШаблонов,ФорматПисьма",
															  "Оплата", "Для менеджера", ТекстСообщения, "Письмо", Регистратор, Истина, Тема, Комментарий,
															   МассивДействующихШаблонов[0], ТипТекстаПисьма);
					ПараметрыОтправки		= СформироватьПараметрыОтправки(Справочники.ШаблоныСообщений.ПустаяСсылка(),
												   		Заказ, Новый УникальныйИдентификатор, ДополнительныеПараметры);
					СформироватьСообщениеИОтправить(ПараметрыОтправки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Округляет проценты отгрузки, оплаты, долга
//
// Параметры:
//	ОкругляемоеЧисло - Число - округляемое число.
//
Процедура ОкруглитьПроценты(ОкругляемоеЧисло)
	
	ОкругляемоеЧисло = Окр(ОкругляемоеЧисло,2);
	
	Если ОкругляемоеЧисло > 99
		И ОкругляемоеЧисло < 100 Тогда
		
		ОкругляемоеЧисло = 99;
		
	КонецЕсли;
	
	Если ОкругляемоеЧисло > 0
		И ОкругляемоеЧисло < 1 Тогда
		
		ОкругляемоеЧисло = 1;
		
	КонецЕсли;
	
КонецПроцедуры
	
Процедура СоздатьЗадачуПриПолнойОплате(Заказ, СуммаОплаты, СуммаЗаказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.Предмет = &Предмет
	|	И ЗадачаИсполнителя.Исполнитель = &Исполнитель";
	
	Запрос.УстановитьПараметр("Предмет", Заказ);
	Запрос.УстановитьПараметр("Исполнитель", Заказ.Менеджер);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата = ТекущаяДата();
	Задача.Автор = ПараметрыСеанса.ТекущийПользователь;
	Задача.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	Задача.Исполнитель = Заказ.Менеджер;
	Задача.Наименование = "Внесена предоплата по документу: " + Заказ;
	Описание = "По заказу внесена предоплата в размере: " + СуммаОплаты + "
	|Заказ готов к обеспечению/отгрузке";
	Если СуммаЗаказ <> СуммаОплаты Тогда
		
		Описание = Описание + "
		|При оплате небольшая коллизия:
		|Должно быть оплачено: " + СуммаЗаказ + "
		|Оплачено по факту: " + СуммаОплаты;
		
	КонецЕсли;
	Задача.Описание = Описание;
	Задача.Предмет = Заказ;
	Задача.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеТаблицыСостоянийЗаказов

// Функция возвращает таблицу значений с состояниями документов.
//
//	Параметры:
//		МассивЗаказов - Массив - (состоящий из ДокументСсылка) ссылки на документы, по которым
//					нужно рассчитать состояние. В модуле менеджера документов должна быть определена функция
//					ТекстЗапросаДляРасчетаДатыАктуальностиСостоянийЗаказов(), которая возвращает текст запроса по датам актуальности и
//					ТекстЗапросаДляРасчетаСостоянийЗаказов(), которая возвращает текст запроса по состояниям заказов.
//	Возвращаемое значение:
//		ТаблицаЗначений:
//			Заказ - ДокументСсылка
//			Состояние - ПеречислениеСсылка.СостоянияЗаказовКлиентов, ПеречислениеСсылка.СостоянияЗаявокНаВозвратТоваровОтКлиента
//			ДатаСобытия - Дата
//			СуммаОплаты - Число
//			ПроцентОплаты - Число
//			СуммаОтгрузки - Число
//			ПроцентОтгрузки - Число
//			СуммаДолга - Число
//			ПроцентДолга - Число
//			ЕстьРасхожденияОрдерНакладная - Булево
//
Функция СформироватьТаблицуСостоянийЗаказов(МассивЗаказов)
	
	СоотвествиеТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивЗаказов);

	Если (СтрНайти(Метаданные.Имя, "УправлениеТорговлей") > 0)
	 ИЛИ (СтрНайти(Метаданные.Имя, "КомплекснаяАвтоматизация") > 0) Тогда
		НЕУТКА = Ложь;
	Иначе	
		НЕУТКА = Истина;          
	КонецЕсли;
	
	ПервыйЗапрос = Истина;
	ТекстЗапросаВременныхТаблиц = ТекстЗапросаДляРасчетаДатСобытийСостоянийЗаказов()
		+ ТекстЗапросаДляРасчетаСостоянийОбеспеченияЗаказа(НЕУТКА)
		+ ТекстЗапросаДляРасчетаРасхожденийОрдерНакладная();
		//++ НЕ УТКА
		Если НЕУТКА Тогда
			ТекстЗапросаВременныхТаблиц = ТекстЗапросаВременныхТаблиц + ТекстЗапросаДляРасчетаСуммыОтгрузкиПоЗаказамДавальцев()
			+ ТекстЗапросаДляРасчетаУслугДавальцуКОформлению();
		КонецЕсли;
		//-- НЕ УТКА
		ТекстЗапросаВременныхТаблиц = ТекстЗапросаВременныхТаблиц + ТекстЗапросаДопустимыхОтклонения(СоотвествиеТипов) 
		;
	
	ТекстЗапроса = "";
	
	Для Каждого ТипДокумента Из СоотвествиеТипов Цикл
		
		Если Не ПервыйЗапрос Тогда 
			ТекстЗапроса = ТекстЗапроса + 
			" ОБЪЕДИНИТЬ ВСЕ ";
		КонецЕсли;
		
		МенеджерОбъекта             = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипДокумента.Ключ);
		ТекстЗапроса                = ТекстЗапроса + МенеджерОбъекта.ТекстЗапросаДляРасчетаСостоянийЗаказов();
		
		ПервыйЗапрос = Ложь;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаВременныхТаблиц + ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("МенеджерСоздаетОрдера", Константы.РежимФормированияРасходныхОрдеров.Получить() = Перечисления.РежимыФормированияРасходныхОрдеров.Менеджером);
	Запрос.УстановитьПараметр("КонтролироватьЗакрытиеЗаказа", 
			ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты")
				ИЛИ ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки"));
				
	//++ НЕ УТКА
	Если НЕУТКА Тогда
		Запрос.УстановитьПараметр("КонтролироватьЗакрытиеЗаказаДавальца", 
				ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыДавальцевБезПолнойОплаты")
					ИЛИ ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыДавальцевБезПолнойОтработки"));
	КонецЕсли;
	//-- НЕ УТКА
	
	Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента", 
		ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	
	Запрос.УстановитьПараметр("МерныеТипыВеличин", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить());
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыКлиентов",
																"ЗаказКлиента В (&МассивЗаказов)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодЗаказыКлиентов", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодЗаказыКлиентов", ГраницыОборотов.МаксимальнаяДата);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ТоварыКОтгрузке",
																"ДокументОтгрузки В (&МассивЗаказов)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодТоварыКОтгрузке", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодТоварыКОтгрузке", ГраницыОборотов.МаксимальнаяДата);

	ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСостояний;
	
КонецФункции

//++ НЕ УТКА
// Функция возвращает текст запроса для расчета суммы отгрузки по заказам давальцев.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаСуммыОтгрузкиПоЗаказамДавальцев()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ЗаказыКлиентовОбороты.КОформлениюРасход * ЗаказДавальцаПродукция.СуммаСНДС/ЗаказДавальцаПродукция.Количество) КАК СуммаОтгрузки,
	|	ЗаказыКлиентовОбороты.ЗаказКлиента КАК Заказ
	|ПОМЕСТИТЬ ВТСуммыОтгрузкиПоЗаказамДавальцев
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Обороты(, , , ЗаказКлиента В (&МассивЗаказов)) КАК ЗаказыКлиентовОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца.Продукция КАК ЗаказДавальцаПродукция
	|		ПО ЗаказыКлиентовОбороты.ЗаказКлиента = ЗаказДавальцаПродукция.Ссылка
	|			И ЗаказыКлиентовОбороты.КодСтроки = ЗаказДавальцаПродукция.КодСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыКлиентовОбороты.ЗаказКлиента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|";
	
	Возврат ТекстЗапроса
	
КонецФункции

// Функция возвращает текст запроса для получения данных об услугах давальцу к оформлению.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаУслугДавальцуКОформлению()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ЗаказыОстатки.КОформлениюОстаток,0)) КАК КОформлению,
	|	ЗаказыОстатки.ЗаказДавальца КАК Заказ
	|ПОМЕСТИТЬ ВТУслугиДавальцуКОформлению
	|ИЗ
	|	РегистрНакопления.УслугиДавальцуКОформлению.Остатки(,ЗаказДавальца В (&МассивЗаказов)) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ЗаказДавальца
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|";
	
	Возврат ТекстЗапроса
	
КонецФункции
//-- НЕ УТКА

//ООООООООООООООООООООООООООООООООООООООООООО
// Функция возвращает текст запроса для расчета даты актуальности состояний заказов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаДатСобытийСостоянийЗаказов()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОбороты.Период КАК Период,
		|	РасчетыСКлиентамиОбороты.КОплатеПриход КАК КОплатеПриход,
		|	РасчетыСКлиентамиОбороты.ЗаказКлиента КАК ЗаказКлиента
		|ПОМЕСТИТЬ ЭтапыРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты(, , День, ЗаказКлиента В (&МассивЗаказов)) КАК РасчетыСКлиентамиОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.ЗаказКлиента КАК ЗаказКлиента,
		|	РасчетыСКлиентамиОстатки.КОплатеРасход КАК КОплатеРасход
		|ПОМЕСТИТЬ ОплаченоПоЗаказам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты(, , , ЗаказКлиента В (&МассивЗаказов)) КАК РасчетыСКлиентамиОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыРасчетов.Период КАК Период,
		|	ЭтапыРасчетов.ЗаказКлиента КАК ЗаказКлиента
		|ПОМЕСТИТЬ РезультатРасчетов
		|ИЗ
		|	ЭтапыРасчетов КАК ЭтапыРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭтапыРасчетов КАК РасчетыСКлиентами
		|		ПО (РасчетыСКлиентами.Период <= ЭтапыРасчетов.Период)
		|			И (РасчетыСКлиентами.ЗаказКлиента = ЭтапыРасчетов.ЗаказКлиента)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОплаченоПоЗаказам КАК Оплачено
		|		ПО ЭтапыРасчетов.ЗаказКлиента = Оплачено.ЗаказКлиента
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыРасчетов.Период,
		|	ЭтапыРасчетов.ЗаказКлиента,
		|	Оплачено.КОплатеРасход
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЭтапыРасчетов.КОплатеПриход) - ЕСТЬNULL(Оплачено.КОплатеРасход, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(РезультатРасчетов.Период) КАК ДатаАктуальности,
		|	РезультатРасчетов.ЗаказКлиента КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ДатыАктуальностиЗаказовКлиентов
		|ИЗ
		|	РезультатРасчетов КАК РезультатРасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	РезультатРасчетов.ЗаказКлиента
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ТаблицаГрафик.Период) КАК МинимальнаяДатаОтгрузки,
		|	ТаблицаГрафик.Регистратор КАК ЗаказКлиента
		|ПОМЕСТИТЬ ДатыОтгрузкиЗаказовКлиентов
		|ИЗ
		|	РегистрНакопления.ГрафикОтгрузкиТоваров КАК ТаблицаГрафик
		|ГДЕ
		|	ТаблицаГрафик.Регистратор В (&МассивЗаказов)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаГрафик.Регистратор
		|;
		|///////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЭтапыРасчетов;
		|УНИЧТОЖИТЬ ОплаченоПоЗаказам;
		|УНИЧТОЖИТЬ РезультатРасчетов;
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает текст запроса для расчета состояний обеспечения заказов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаСостоянийОбеспеченияЗаказа(НЕУТКА)
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Ссылка КАК Заказ,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗаказКлиентаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется))
		|				И ЗаказКлиентаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОбеспечениеТребуется,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОбеспечениеИзЗаказовОжидается,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|				И ЕСТЬNULL(ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток,0) < ЗаказКлиентаТовары.Количество
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОбособленноеОбеспечениеТребуется
		|ПОМЕСТИТЬ ВТСостоянияОбеспечения
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(,Назначение.Заказ В (&МассивЗаказов)) КАК ОбеспечениеЗаказовОстатки
		|			ПО ЗаказКлиентаТовары.Ссылка.Назначение = ОбеспечениеЗаказовОстатки.Назначение
		|				И ЗаказКлиентаТовары.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура
		|				И ЗаказКлиентаТовары.Характеристика = ОбеспечениеЗаказовОстатки.Характеристика
		|				И ЗаказКлиентаТовары.Склад = ОбеспечениеЗаказовОстатки.Склад
		|	
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка В(&МассивЗаказов)
		|	И НЕ ЗаказКлиентаТовары.Отменено
		|	И НЕ ЗаказКлиентаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиентаТовары.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаменяющиеТовары.Ссылка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗаменяющиеТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется))
		|				И ЗаменяющиеТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))	
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ),
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗаменяющиеТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОбеспечениеИзЗаказовОжидается,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗаменяющиеТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|				И ЕСТЬNULL(ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток,0) < ЗаменяющиеТовары.Количество
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ)
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ЗаменяющиеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(,Назначение.Заказ В (&МассивЗаказов)) КАК ОбеспечениеЗаказовОстатки
		|			ПО ЗаменяющиеТовары.Ссылка.Назначение = ОбеспечениеЗаказовОстатки.Назначение
		|				И ЗаменяющиеТовары.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура
		|				И ЗаменяющиеТовары.Характеристика = ОбеспечениеЗаказовОстатки.Характеристика
		|				И ЗаменяющиеТовары.Ссылка.Склад = ОбеспечениеЗаказовОстатки.Склад
		|ГДЕ
		|	ЗаменяющиеТовары.Ссылка В(&МассивЗаказов)
		|	И НЕ ЗаменяющиеТовары.Отменено
		|	И НЕ ЗаменяющиеТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаменяющиеТовары.Ссылка
		|";
		//++ НЕ УТКА
		Если НЕУТКА Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаказДавальцаТовары.Ссылка,
			|	ЛОЖЬ,
			|	ЛОЖЬ,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ЗаказДавальцаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
			|				И ЕСТЬNULL(ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток,0) < 
			|					(ЗаказДавальцаТовары.Количество - ЗаказДавальцаТовары.Количество * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ)
			|ИЗ
			|	Документ.ЗаказДавальца.Продукция КАК ЗаказДавальцаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(,Назначение.Заказ В (&МассивЗаказов)) КАК ОбеспечениеЗаказовОстатки
			|			ПО ЗаказДавальцаТовары.Ссылка.Назначение = ОбеспечениеЗаказовОстатки.Назначение
			|				И ЗаказДавальцаТовары.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура
			|				И ЗаказДавальцаТовары.Характеристика = ОбеспечениеЗаказовОстатки.Характеристика
			|				И ЗаказДавальцаТовары.Склад = ОбеспечениеЗаказовОстатки.Склад
			|ГДЕ
			|	ЗаказДавальцаТовары.Ссылка В(&МассивЗаказов)
			|	И НЕ ЗаказДавальцаТовары.Отменено
			|	И НЕ ЗаказДавальцаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказДавальцаТовары.Ссылка
			|
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		//-- НЕ УТКА
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|;";
	
	Возврат ТекстЗапроса
	
КонецФункции

// Функция возвращает текст запроса для расчета расхождений ордер-накладная.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаРасхожденийОрдерНакладная()
	
	ТекстЗапроса = ТекстЗапросаДляРасчетаЕстьОрдер() + "
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ЗаказКлиента,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ТоварыКОтгрузке.КОформлениюПриход > 0 
		|			И ТоварыКОтгрузке.КОформлениюРасход <> (ТоварыКОтгрузке.СобраноПриход + ТоварыКОтгрузке.КОтгрузкеРасход) ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ) КАК ЕстьРасхожденияОрдерНакладная,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА &МенеджерСоздаетОрдера
		|			И (ТоварыКОтгрузке.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И ТоварыКОтгрузке.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)))
		|			И ВТЕстьОрдер.ЕстьОрдер ЕСТЬ NULL ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ) КАК ТребуетсяОрдер
		|ПОМЕСТИТЬ ВТРасхожденияОрдерНакладная
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(,,,,ДокументОтгрузки В (&МассивЗаказов)) КАК ТоварыКОтгрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЕстьОрдер КАК ВТЕстьОрдер
		|			ПО ТоварыКОтгрузке.ДокументОтгрузки = ВТЕстьОрдер.ЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
		|			ПО ТоварыКОтгрузке.ДокументОтгрузки = РеквизитыРаспоряжения.Ссылка
		|				И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузке.ДокументОтгрузки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказКлиента
		|;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

// Функция возвращает текст запроса для поиска расходных ордеров.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаЕстьОрдер()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ЗаказКлиента,
		|	ИСТИНА КАК ЕстьОрдер
		|ПОМЕСТИТЬ ВТЕстьОрдер
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(, , Регистратор, , ДокументОтгрузки В (&МассивЗаказов)) КАК ТоварыКОтгрузке
		|ГДЕ
		|	ТоварыКОтгрузке.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузке.ДокументОтгрузки
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказКлиента
		|;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

// Функция возвращает текст запроса для расчета допустимых отклонения мерных товаров.
Функция ТекстЗапросаДопустимыхОтклонения(СоотвествиеТипов)
	
	Если НЕ СоотвествиеТипов["Документ.ЗаказКлиента"] = Неопределено
		ИЛИ НЕ СоотвествиеТипов["Документ.ЗаявкаНаВозвратТоваровОтКлиента"] = Неопределено
		//++ НЕ УТКА
		ИЛИ НЕ СоотвествиеТипов["Документ.ЗаказДавальца"] = Неопределено
		//-- НЕ УТКА
		Тогда
		
		Возврат "
		|ВЫБРАТЬ
		|	ЗаказыОстатки.ЗаказКлиента                           КАК ЗаказКлиента,
		|	СУММА(ЗаказыОстатки.КОформлениюКонечныйОстаток)      КАК КОформлениюКонечныйОстаток,
		|	СУММА(ЗаказыОстатки.ЗаказаноКонечныйОстаток)         КАК ЗаказаноКонечныйОстаток,
		|	СУММА(ЗаказыОстатки.СуммаКонечныйОстаток)            КАК СуммаКонечныйОстаток,
		|	СУММА(ЗаказыОстатки.СуммаРасходСУчетомМерныхТоваров) КАК СуммаРасходСУчетомМерныхТоваров,
		|	СУММА(ЗаказыОстатки.СуммаРасход)                     КАК СуммаРасход
		|	
		|ПОМЕСТИТЬ ВТЗаказыКлиентовОстатки
		|
		|ИЗ (ВЫБРАТЬ
		|		ЗаказыКлиентовОстатки.ЗаказКлиента   КАК ЗаказКлиента,
		|		ЗаказыКлиентовОстатки.Номенклатура   КАК Номенклатура,
		|		ЗаказыКлиентовОстатки.Характеристика КАК Характеристика,
		|		ЗаказыКлиентовОстатки.Склад          КАК Склад,
		|		ЗаказыКлиентовОстатки.Серия          КАК Серия,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА ВЫБОР
		|						КОГДА ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток <= ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток >= -(ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
		|							ТОГДА 0 
		|						ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0)
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0)
		|		КОНЕЦ                                                   КАК КОформлениюКонечныйОстаток,
		|	
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА ВЫБОР
		|						КОГДА ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток <= ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток >= -(ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
		|							ТОГДА 0 
		|						ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток, 0)
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток, 0)
		|		КОНЕЦ                                                   КАК ЗаказаноКонечныйОстаток,
		|		
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаКонечныйОстаток, 0) КАК СуммаКонечныйОстаток,
		|		
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЗаказыКлиентовОстатки.СуммаКонечныйОстаток <= 
		|								ЗаказыКлиентовОстатки.СуммаПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ЗаказыКлиентовОстатки.СуммаКонечныйОстаток >= 
		|								-ЗаказыКлиентовОстатки.СуммаПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							ТОГДА ЗаказыКлиентовОстатки.СуммаПриход
		|						ИНАЧЕ ЗаказыКлиентовОстатки.СуммаРасход
		|					КОНЕЦ
		|			ИНАЧЕ ЗаказыКлиентовОстатки.СуммаРасход
		|		КОНЕЦ                                                    КАК СуммаРасходСУчетомМерныхТоваров,
		|		
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаРасход, 0) КАК СуммаРасход
		|		
		|	ИЗ РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(&НачПериодЗаказыКлиентов, &КонПериодЗаказыКлиентов,
		|		,,ЗаказКлиента В (&МассивЗаказов)) КАК ЗаказыКлиентовОстатки) КАК ЗаказыОстатки
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыОстатки.ЗаказКлиента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОстатки.ЗаказКлиента КАК ЗаказКлиента,
		|	СУММА(ТоварыОстатки.КОтгрузкеОстаток) КАК КОтгрузкеОстаток
		|
		|ПОМЕСТИТЬ ВТТоварыКОтгрузкеОстатки
		|
		|ИЗ (ВЫБРАТЬ
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ЗаказКлиента,
		|		ТоварыКОтгрузкеОстатки.Номенклатура     КАК Номенклатура,
		|		ТоварыКОтгрузкеОстатки.Характеристика   КАК Характеристика,
		|		ТоварыКОтгрузкеОстатки.Склад            КАК Склад,
		|		ТоварыКОтгрузкеОстатки.Серия            КАК Серия,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА ВЫБОР
		|						КОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток <= ТоварыКОтгрузкеОстатки.КОтгрузкеПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток >= -(ТоварыКОтгрузкеОстатки.КОтгрузкеПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
		|							ТОГДА 0 
		|						ИНАЧЕ ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток, 0)
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток, 0)
		|		КОНЕЦ                                   КАК КОтгрузкеОстаток
		|
		|ИЗ РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(&НачПериодТоварыКОтгрузке, &КонПериодТоварыКОтгрузке,
		|	,, ДокументОтгрузки В (&МассивЗаказов)) КАК ТоварыКОтгрузкеОстатки) КАК ТоварыОстатки
		|СГРУППИРОВАТЬ ПО
		|	ТоварыОстатки.ЗаказКлиента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
	
КонецФункции

#КонецОбласти
//ОООООООООООООООООООООООООООООООО ОПОВЕЩЕНИЯ ОБ ОПЛАТЕ ЗАКАЗА КОНЕЦ

//ОООООООООООООООООООООООООООООООО ОПОВЕЩЕНИЯ О НАЛИЧИИИ ТОВАРОВ ДЛЯ ЗАКАЗА НА СКЛАДЕ НАЧАЛО
Процедура ОбработатьСобытиеОГотовностиКОтгрузке(Регистратор) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		ВключенаОтправкаSMS = Истина;
		ВключенаРаботаСПочтовымиСообщениями = Истина;
	Иначе
		ВключенаРаботаСПочтовымиСообщениями = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
		ВключенаОтправкаSMS = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS");
	КонецЕсли;
	
	СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить("Обработка.ОповещенияПриРаботеСЗаказами.Форма.Форма","СтруктураНастроек");
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		ТаблицаШаблонов	= СтруктураНастроек.ТаблицаШаблонов;
		ПредопределенныеВидыОповещений = СоздатьПредопределенныеШаблоныСообщений();
		Если ПредопределенныеВидыОповещений.Количество() > 0 Тогда
			НадоСохранить = Ложь;
			Для Каждого СтрокаТаблицы Из ТаблицаШаблонов Цикл
				Если СокрЛП(СтрокаТаблицы.ГруппаРассылокИОповещений.Наименование) = "" Тогда
					Для Каждого ВидОповещения Из ПредопределенныеВидыОповещений Цикл
						Если СокрЛП(СтрокаТаблицы.НаименованиеГруппыРассылокИОповещений) = СокрЛП(ВидОповещения.ГруппаРассылокИОповещений.Наименование) Тогда
							СтрокаТаблицы.ГруппаРассылокИОповещений = ВидОповещения.ГруппаРассылокИОповещений;
							СтрокаТаблицы.ТипСобытия	= "ОбеспеченностьТоварами";	
							НадоСохранить = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если СокрЛП(СтрокаТаблицы.ВидОповещения.Наименование) = "" Тогда
					Для Каждого ВидОповещения Из ПредопределенныеВидыОповещений Цикл
						Если СокрЛП(СтрокаТаблицы.НаименованиеВидаОповещения) = СокрЛП(ВидОповещения.Наименование) Тогда
							СтрокаТаблицы.ВидОповещения = ВидОповещения;
							СтрокаТаблицы.ТипСобытия	= "ОбеспеченностьТоварами";	
							НадоСохранить = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если СокрЛП(СтрокаТаблицы.Шаблон.Наименование) = "" Тогда
					Для Каждого ВидОповещения Из ПредопределенныеВидыОповещений Цикл
						Если ВидОповещения.ПредназначенаДляSMS Тогда
							Шаблон = ВидОповещения.ШаблонСообщенияSMS;
						Иначе	
							Шаблон = ВидОповещения.ШаблонЭлектронногоПисьма;
						КонецЕсли;
						Если СокрЛП(СтрокаТаблицы.НаименованиеШаблона) = СокрЛП(Шаблон.Наименование) Тогда
							СтрокаТаблицы.Шаблон		= Шаблон;
							СтрокаТаблицы.ТипСобытия	= "ОбеспеченностьТоварами";	
							НадоСохранить = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если НадоСохранить Тогда
				СпрПользователи = Справочники.Пользователи.Выбрать();
				Пока СпрПользователи.Следующий() Цикл
					Если СпрПользователи.Служебный Тогда
						Продолжить;
					КонецЕсли;
					ПользИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(СпрПользователи.ИдентификаторПользователяИБ);
					Если ПользИБ = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ХранилищеОбщихНастроек.Сохранить("Обработка.ОповещенияПриРаботеСЗаказами.Форма.Форма","СтруктураНастроек", СтруктураНастроек,, ПользИБ.Имя);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Попытка
			СоздаватьЗадачиМенеджерамПриГотовностиЗаказовКОтгрузке	= СтруктураНастроек.СоздаватьЗадачиМенеджерамПриГотовностиЗаказовКОтгрузке;
		Исключение
			СоздаватьЗадачиМенеджерамПриГотовностиЗаказовКОтгрузке	= Ложь;
		КонецПопытки;
		СтруктураПоискаШаблона		= Новый Структура("ТипСобытия,Использовать", "ОбеспеченностьТоварами", Истина); 
		МассивДействующихШаблонов	= ТаблицаШаблонов.НайтиСтроки(СтруктураПоискаШаблона);
		Если (МассивДействующихШаблонов.Количество() = 0) И (Не СоздаватьЗадачиМенеджерамПриГотовностиЗаказовКОтгрузке) Тогда
			Возврат;
		КонецЕсли;
		Попытка
			ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату	= СтруктураНастроек.ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату;
		Исключение
			ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату	= Ложь;
		КонецПопытки;
		Попытка
			ДатаНачалаОтслеживанияГотовностиЗаказовКОтгрузке	= СтруктураНастроек.ДатаНачалаОтслеживанияГотовностиЗаказовКОтгрузке;
		Исключение
			ДатаНачалаОтслеживанияГотовностиЗаказовКОтгрузке	= ТекущаяДата();
		КонецПопытки;
		Попытка
			ДнейБесплатногоХраненияТоваров						= СтруктураНастроек.ДнейБесплатногоХраненияТоваров;
		Исключение
			ДнейБесплатногоХраненияТоваров						= 3;
		КонецПопытки;
		
		Если НачалоДня(ДатаНачалаОтслеживанияГотовностиЗаказовКОтгрузке) > Регистратор.Дата Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладах.Характеристика КАК Характеристика,
		|	ТоварыНаСкладах.Склад КАК Склад,
		|	СУММА(ТоварыНаСкладах.ВНаличии) КАК ВНаличии
		|ПОМЕСТИТЬ ТоварыРегистратора
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки КАК ТоварыНаСкладах
		|ГДЕ
		|	ТоварыНаСкладах.Регистратор = &Регистратор
		|	И ТоварыНаСкладах.Склад В ИЕРАРХИИ(&Склад)
		|	И ТоварыНаСкладах.Номенклатура В(&Номенклатура)
		|	И ТоварыНаСкладах.Характеристика В(&Характеристика)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладах.Склад,
		|	ТоварыНаСкладах.Номенклатура,
		|	ТоварыНаСкладах.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Ссылка КАК ЗаказКлиента,
		|	ЗаказКлиентаТовары.Ссылка.Склад КАК Склад,
		|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
		|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
		|	СУММА(ЕСТЬNULL(ЗаказыКлиентовОстатки.ЗаказаноОстаток, 0)) КАК ЗаказаноОстаток
		|ПОМЕСТИТЬ ЗаказыКлиентовТовары
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки(
		|				&МоментВремени,
		|				Склад В ИЕРАРХИИ (&Склад)
		|					И Номенклатура В (&Номенклатура)
		|					И Характеристика В (&Характеристика)) КАК ЗаказыКлиентовОстатки
		|		ПО ЗаказКлиентаТовары.Ссылка = ЗаказыКлиентовОстатки.ЗаказКлиента
		|			И ЗаказКлиентаТовары.Номенклатура = ЗаказыКлиентовОстатки.Номенклатура
		|			И ЗаказКлиентаТовары.Характеристика = ЗаказыКлиентовОстатки.Характеристика
		|			И ЗаказКлиентаТовары.Ссылка.Склад = ЗаказыКлиентовОстатки.Склад
		|ГДЕ
		|	ЕСТЬNULL(ЗаказыКлиентовОстатки.ЗаказаноОстаток, 0) > 0
		|	И ЗаказКлиентаТовары.Номенклатура В(&Номенклатура)
		|	И ЗаказКлиентаТовары.Ссылка.Склад В ИЕРАРХИИ(&Склад)
		|	И ЗаказКлиентаТовары.Ссылка.МоментВремени <= &МоментВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиентаТовары.Ссылка,
		|	ЗаказКлиентаТовары.Ссылка.Склад,
		|	ЗаказКлиентаТовары.Номенклатура,
		|	ЗаказКлиентаТовары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыКлиентовТовары.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	ЗаказыКлиентовТовары КАК ЗаказыКлиентовТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыРегистратора КАК ТоварыРегистратора
		|		ПО ЗаказыКлиентовТовары.Номенклатура = ТоварыРегистратора.Номенклатура
		|			И ЗаказыКлиентовТовары.Характеристика = ТоварыРегистратора.Характеристика
		|			И ЗаказыКлиентовТовары.Склад = ТоварыРегистратора.Склад
		|ГДЕ
		|	ЕСТЬNULL(ЗаказыКлиентовТовары.ЗаказаноОстаток, 0) > 0
		|	И ЕСТЬNULL(ТоварыРегистратора.ВНаличии, 0) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказыКлиентовТовары.ЗаказКлиента.МоментВремени";
		
		Параметры		= Новый Массив(2);
		Параметры[0]	= Регистратор.Дата;
		Параметры[1]	= Регистратор;
		МоментВремени	= Новый (Тип("МоментВремени"),Параметры);
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		
		Если НЕ ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			Склад = Регистратор.Склад;
		Иначе
			Склад = Регистратор.СкладПолучатель;
		КонецЕсли;
		Запрос.УстановитьПараметр("Склад", Склад);
	
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.СборкаТоваров") Тогда 
			Запрос.УстановитьПараметр("Номенклатура", Регистратор.Номенклатура);
		Иначе
			Запрос.УстановитьПараметр("Номенклатура", Регистратор.Товары.ВыгрузитьКолонку("Номенклатура"));
		КонецЕсли;
		
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.СборкаТоваров") Тогда 
			Запрос.УстановитьПараметр("Характеристика", Регистратор.Характеристика);
		Иначе
			Запрос.УстановитьПараметр("Характеристика", Регистратор.Товары.ВыгрузитьКолонку("Характеристика"));
		КонецЕсли;
		
		ВыборкаЗаказы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЗаказы.Следующий() Цикл 
			Если ВыборкаЗаказы.ЗаказКлиента.Менеджер.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			Заказ 	= ВыборкаЗаказы.ЗаказКлиента;
			Если ПроверитьНеобхоимостьОтправкиОповещенияПоЗаказу(Заказ) Тогда
				Продолжить;		
			КонецЕсли;
			Если СоздаватьЗадачиМенеджерамПриГотовностиЗаказовКОтгрузке Тогда
				СоздатьЗадачуПользователюПриГотовностиКОтгрузке(Заказ);		
			КонецЕсли;
			Тема	= "О готовности заказа клиента к отгрузке";
			ТелефонОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказ.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,Заказ.Дата, Истина);
			Если ВключенаОтправкаSMS Тогда  
				СтруктураПоискаШаблона = Новый Структура("НаименованиеВидаОповещения,Использовать", "Наличие товаров по заказу (SMS клиенту)", Истина); 
				МассивДействующихШаблонов = ТаблицаШаблонов.НайтиСтроки(СтруктураПоискаШаблона);
				Если МассивДействующихШаблонов.Количество() > 0 Тогда
					Комментарий		= МассивДействующихШаблонов[0].Шаблон.Наименование;
					ТекстСообщения	= МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаSMS;
					Если НЕ ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату Тогда
						ТекстСообщения = СтрЗаменить(ТекстСообщения, " [ЗаказКлиента.КонтактноеЛицоНаименование]","");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, " !","!");
					КонецЕсли;
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Номер]",					СокрЛП(Заказ.Номер));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Дата]",						Формат(Заказ.Дата,"ДФ=dd.MM.yyyy"));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Менеджер]",					СокрЛП(Заказ.Менеджер));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ТелефонОрганизации]",		СокрЛП(ТелефонОрганизации));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ДнейБесплатногоХранения]",	СокрЛП(ДнейБесплатногоХраненияТоваров));
					ДополнительныеПараметры = Новый Структура("ДнейБесплатногоХранения,ТипСобытия,ДляКого,ТекстСообщения,ВидСообщения,Регистратор,ОтправитьСразу,Тема,Комментарий,
															  |СтрокаТаблицыШаблонов,ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату",
															  ДнейБесплатногоХраненияТоваров, "ОбеспеченностьТоварами", "Для клиента", ТекстСообщения, "СообщениеSMS", Регистратор, Истина, Тема, Комментарий,
															  МассивДействующихШаблонов[0], ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату);
					ПараметрыОтправки		= СформироватьПараметрыОтправки(Справочники.ШаблоныСообщений.ПустаяСсылка(),
												   		Заказ, Новый УникальныйИдентификатор, ДополнительныеПараметры);
					СформироватьСообщениеИОтправить(ПараметрыОтправки);
				КонецЕсли;
				СтруктураПоискаШаблона = Новый Структура("НаименованиеВидаОповещения,Использовать", "Наличие товаров по заказу (SMS менеджеру)", Истина); 
				МассивДействующихШаблонов = ТаблицаШаблонов.НайтиСтроки(СтруктураПоискаШаблона);
				Если МассивДействующихШаблонов.Количество() > 0 Тогда
					Комментарий	   = МассивДействующихШаблонов[0].Шаблон.Наименование;
					ТекстСообщения = МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаSMS;
					ТекстСообщения = СтрЗаменить(ТекстСообщения, " [ЗаказКлиента.КонтактноеЛицоНаименование]","");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, " !","!");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Номер]",					СокрЛП(Заказ.Номер));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Дата]",						Формат(Заказ.Дата,"ДФ=dd.MM.yyyy"));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Менеджер]",					"");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ТелефонОрганизации]",		"");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ДнейБесплатногоХранения]",	"");
					ДополнительныеПараметры = Новый Структура("ДнейБесплатногоХранения,ТипСобытия,ДляКого,ТекстСообщения,ВидСообщения,Регистратор,ОтправитьСразу,Тема,Комментарий,
															  |СтрокаТаблицыШаблонов,ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату",
															  ДнейБесплатногоХраненияТоваров, "ОбеспеченностьТоварами", "Для менеджера", ТекстСообщения, "СообщениеSMS", Неопределено, Истина, Тема, Комментарий,
															  МассивДействующихШаблонов[0], ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату);
					ПараметрыОтправки		= СформироватьПараметрыОтправки(Справочники.ШаблоныСообщений.ПустаяСсылка(),
												   		Заказ, Новый УникальныйИдентификатор, ДополнительныеПараметры);
					СформироватьСообщениеИОтправить(ПараметрыОтправки);
				КонецЕсли;
			КонецЕсли;
			Если ВключенаРаботаСПочтовымиСообщениями Тогда
				СтруктураПоискаШаблона = Новый Структура("НаименованиеВидаОповещения,Использовать", "Наличие товаров по заказу (e-mail клиенту)", Истина); 
				МассивДействующихШаблонов = ТаблицаШаблонов.НайтиСтроки(СтруктураПоискаШаблона);
				Если МассивДействующихШаблонов.Количество() > 0 Тогда
					Комментарий		= МассивДействующихШаблонов[0].Шаблон.Наименование;
					ТипТекстаПисьма = МассивДействующихШаблонов[0].Шаблон.ТипТекстаПисьма;
					Если ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
						ТекстСообщения = МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаПисьма;
					Иначе	
						ТекстСообщения = МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаПисьмаHTML;
					КонецЕсли;
					Если НЕ ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату Тогда
						ТекстСообщения = СтрЗаменить(ТекстСообщения, " [ЗаказКлиента.КонтактноеЛицоНаименование]","");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, " !","!");
					КонецЕсли;
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Номер]",					СокрЛП(Заказ.Номер));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Дата]",						Формат(Заказ.Дата,"ДФ=dd.MM.yyyy"));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Менеджер]",					СокрЛП(Заказ.Менеджер));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ТелефонОрганизации]",		СокрЛП(ТелефонОрганизации));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ДнейБесплатногоХранения]",	СокрЛП(ДнейБесплатногоХраненияТоваров));
					ДополнительныеПараметры = Новый Структура("ДнейБесплатногоХранения,ТипСобытия,ДляКого,ТекстСообщения,ВидСообщения,Регистратор,ОтправитьСразу,Тема,Комментарий,СтрокаТаблицыШаблонов,ФорматПисьма",
															   ДнейБесплатногоХраненияТоваров, "ОбеспеченностьТоварами", "Для клиента", ТекстСообщения, "Письмо", Регистратор, Истина, Тема, Комментарий,
															   МассивДействующихШаблонов[0], ТипТекстаПисьма);
					ПараметрыОтправки		= СформироватьПараметрыОтправки(Справочники.ШаблоныСообщений.ПустаяСсылка(),
												   		Заказ, Новый УникальныйИдентификатор, ДополнительныеПараметры);
					СформироватьСообщениеИОтправить(ПараметрыОтправки);
				КонецЕсли;
				СтруктураПоискаШаблона = Новый Структура("НаименованиеВидаОповещения,Использовать", "Наличие товаров по заказу (e-mail менеджеру)", Истина); 
				МассивДействующихШаблонов = ТаблицаШаблонов.НайтиСтроки(СтруктураПоискаШаблона);
				Если МассивДействующихШаблонов.Количество() > 0 Тогда
					Комментарий		= МассивДействующихШаблонов[0].Шаблон.Наименование;
					ТипТекстаПисьма = МассивДействующихШаблонов[0].Шаблон.ТипТекстаПисьма;
					Если ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
						ТекстСообщения = МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаПисьма;
					Иначе	
						ТекстСообщения = МассивДействующихШаблонов[0].Шаблон.ТекстШаблонаПисьмаHTML;
					КонецЕсли;
					ТекстСообщения = СтрЗаменить(ТекстСообщения, " [ЗаказКлиента.КонтактноеЛицоНаименование]","");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, " !","!");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Номер]",					СокрЛП(Заказ.Номер));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Дата]",						Формат(Заказ.Дата,"ДФ=dd.MM.yyyy"));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.Менеджер]",					"");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ТелефонОрганизации]",		"");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗаказКлиента.ДнейБесплатногоХранения]",	"");
					ДополнительныеПараметры = Новый Структура("ДнейБесплатногоХранения,ТипСобытия,ДляКого,ТекстСообщения,ВидСообщения,Регистратор,ОтправитьСразу,Тема,Комментарий,СтрокаТаблицыШаблонов,ФорматПисьма",
															   ДнейБесплатногоХраненияТоваров, "ОбеспеченностьТоварами", "Для менеджера", ТекстСообщения, "Письмо", Регистратор, Истина, Тема, Комментарий,
															   МассивДействующихШаблонов[0], ТипТекстаПисьма);
					ПараметрыОтправки		= СформироватьПараметрыОтправки(Справочники.ШаблоныСообщений.ПустаяСсылка(),
												   		Заказ, Новый УникальныйИдентификатор, ДополнительныеПараметры);
					СформироватьСообщениеИОтправить(ПараметрыОтправки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьНеобхоимостьОтправкиОповещенияПоЗаказу(Заказ)

	ИндексыСтрок = Новый Массив;
	Для каждого СТЧ из Заказ.Товары Цикл 
		
		ИндексыСтрок.Добавить(СТЧ.НомерСтроки-1);
		
	КонецЦикла;
	
	Варианты = Новый Массив;
	Варианты.Добавить(Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно);
	Варианты.Добавить(Перечисления.ВариантыОбеспечения.Отгрузить);
	Варианты.Добавить(Перечисления.ВариантыОбеспечения.Требуется);
	
	ПутиКДанным = Новый Соответствие; //Описание особенностей формы
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки"); // дату отгрузки работ необходимо брать из поля "Дата отгрузки".
	
	Парам = Новый Структура("ИмяТабличнойЧасти,ПутиКДанным", "Товары",ПутиКДанным);
	
	Парам.Вставить("СтатусКВыполнению", Заказ.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	Парам.Вставить("ГруппаСкладов", Заказ.Склад);
	Парам.Вставить("МенеджерРегистра", РегистрыНакопления.ЗаказыКлиентов);
	
	Результат = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспеченияДокумента(Заказ.ПолучитьОбъект(), Варианты, Парам, ИндексыСтрок);
	
	Фильтр = Новый Структура("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Требуется);
	Фильтр2 = Новый Структура("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Обособленно);
	Необеспеченные = Результат.НайтиСтроки(Фильтр);
	Необеспеченные2 = Результат.НайтиСтроки(Фильтр2);
	
	Если Необеспеченные.Количество() > 0 ИЛИ Необеспеченные2.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Процедура СоздатьЗадачуПользователюПриГотовностиКОтгрузке(ЗаказКлиента)
	
	Наименование = "По документу " + ЗаказКлиента + " все товары готовы к отгрузке";
	
	//Проверим, что задача еще не создана
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата = ТекущаяДата();
	Задача.ДатаНачала = ТекущаяДата();
	Задача.Наименование = Наименование;
	Задача.Исполнитель = ЗаказКлиента.Менеджер;
	Задача.Предмет = ЗаказКлиента;
	Задача.Описание = "По заказу все товары есть в наличии на складе, можно оформлять отгрузку клиенту";
	Задача.Записать();
	
КонецПроцедуры
//ОООООООООООООООООООООООООООООООО ОПОВЕЩЕНИЯ О НАЛИЧИИИ ТОВАРОВ ДЛЯ ЗАКАЗА НА СКЛАДЕ КОНЕЦ

//ОООООООООООООООООООООООООООООООО ОТПРАВКА ОПОВЕЩЕНИЙ НАЧАЛО
#Область ОтправкаОповещений

Функция НайтиДокументСообщениеSMS(Тема, Комментарий, ТекстСообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СообщениеSMS.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеSMS КАК СообщениеSMS
	|		ПО СообщениеSMSАдресаты.Ссылка = СообщениеSMS.Ссылка
	|ГДЕ
	|	(НЕ СообщениеSMS.ПометкаУдаления)
	|	И (НЕ СообщениеSMS.ОтправлятьВТранслите)
	|	И СообщениеSMS.ТекстСообщения ПОДОБНО &ТекстСообщения
	|	И СообщениеSMS.Комментарий ПОДОБНО &Комментарий
	//|	И СообщениеSMSАдресаты.ИдентификаторСообщения = """"
	|";
	
	Запрос.УстановитьПараметр("ТекстСообщения",	"%" + ТекстСообщения + "%");
	Запрос.УстановитьПараметр("Комментарий",	"%" + Комментарий + "%");
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

Функция НайтиДокументПочтовогоСообщения(ПараметрыПисьма, Комментарий)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
	|		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ЭлектронноеПисьмоИсходящее.ТипТекста =  ЗНАЧЕНИЕ(Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст)
	|		ТОГДА ЭлектронноеПисьмоИсходящее.Текст ПОДОБНО &ТекстСообщения
	|		ИНАЧЕ ЭлектронноеПисьмоИсходящее.ТекстHTML ПОДОБНО &ТекстСообщения
	|	КОНЕЦ
	|	И НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	|	И ЭлектронноеПисьмоИсходящееПолучателиПисьма.Адрес ПОДОБНО &Адрес
	|	И ЭлектронноеПисьмоИсходящее.Комментарий ПОДОБНО &Комментарий
	|	И ЭлектронноеПисьмоИсходящее.Тема ПОДОБНО &Тема
	|	И ЭлектронноеПисьмоИсходящее.ТипТекста = &ТипТекста
	|";
	
	Запрос.УстановитьПараметр("Комментарий",	"%" + Комментарий + "%");
	Запрос.УстановитьПараметр("Адрес",			"%" + ПараметрыПисьма.Кому[0].Адрес + "%");
	Запрос.УстановитьПараметр("ТипТекста",		ПараметрыПисьма.ТипТекста);
	Запрос.УстановитьПараметр("ТекстСообщения",	"%" + ПараметрыПисьма.Тело + "%");
	Запрос.УстановитьПараметр("Тема",			"%" + ПараметрыПисьма.Тема + "%");
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

Функция СформироватьПараметрыОтправки(Шаблон, Предмет, УникальныйИдентификатор, ДополнительныеПараметры = Неопределено)
	
	ПараметрыОтправки = ШаблоныСообщенийКлиентСервер.КонструкторПараметровОтправки(Шаблон.Ссылка, Предмет, УникальныйИдентификатор);
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтправки.ДополнительныеПараметры, ДополнительныеПараметры, Истина);
	КонецЕсли;
	
	Возврат ПараметрыОтправки;
	
КонецФункции

Функция ПроверитьСостояниеОтправкиСообщения(ПараметрыОтправки, СтрокаТаблицыШаблонов, Получатели, ВидСообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПоследнихОповещений.ВидОповещения КАК ВидОповещения,
		|	ДанныеПоследнихОповещений.ИсточникОповещения КАК ИсточникОповещения,
		|	ДанныеПоследнихОповещений.Подписчик КАК Подписчик,
		|	ДанныеПоследнихОповещений.ДанныеПоследнегоОповещения КАК ДанныеПоследнегоОповещения
		|ИЗ
		|	РегистрСведений.ДанныеПоследнихОповещений КАК ДанныеПоследнихОповещений
		|ГДЕ
		|	ДанныеПоследнихОповещений.ИсточникОповещения = &ИсточникОповещения
		|	И ДанныеПоследнихОповещений.Подписчик = &Подписчик
		//|	И ДанныеПоследнихОповещений.ВидОповещения = &ВидОповещения
		|";
	
	//Запрос.УстановитьПараметр("ВидОповещения", 		СтрокаТаблицыШаблонов.ВидОповещения);
	Запрос.УстановитьПараметр("ИсточникОповещения",	ПараметрыОтправки.Предмет);
	Запрос.УстановитьПараметр("Подписчик", 			ПараметрыОтправки.Предмет.Партнер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипСобытия = ПараметрыОтправки.ДополнительныеПараметры.ТипСобытия;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОтправленныеДанные = ВыборкаДетальныеЗаписи.ДанныеПоследнегоОповещения.Получить();
		Попытка
			ОтправленнаяСтрокаПолучателей = "";
			СтрокаПолучателей = "";
			Если ВидСообщения = "СообщениеSMS" Тогда
				Для Каждого Получатель Из ОтправленныеДанные.Получатели Цикл
					Если ТипЗнч(Получатель) = Тип("Структура") Тогда
						ОтправленнаяСтрокаПолучателей = ОтправленнаяСтрокаПолучателей + Получатель.НомерТелефона;
					Иначе
						ОтправленнаяСтрокаПолучателей = ОтправленнаяСтрокаПолучателей + Получатель.Значение;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Получатель Из Получатели Цикл
					Если ТипЗнч(Получатель) = Тип("Структура") Тогда
						СтрокаПолучателей = СтрокаПолучателей + Получатель.НомерТелефона;
					Иначе
						СтрокаПолучателей = СтрокаПолучателей + Получатель.Значение;
					КонецЕсли;
				КонецЦикла;
			Иначе	
				СпискаПолучателейСКонтактом = (ТипЗнч(ОтправленныеДанные.Получатели)= Тип("Массив"));
				Для каждого Получатель Из ОтправленныеДанные.Получатели Цикл
					Если СпискаПолучателейСКонтактом Тогда
						ОтправленнаяСтрокаПолучателей = ОтправленнаяСтрокаПолучателей + Получатель.Адрес;
					Иначе
						ОтправленнаяСтрокаПолучателей = ОтправленнаяСтрокаПолучателей + Получатель.Значение;
					КонецЕсли;
				КонецЦикла;
				СпискаПолучателейСКонтактом = (ТипЗнч(Получатели)= Тип("Массив"));
				Для каждого Получатель Из Получатели Цикл
					Если СпискаПолучателейСКонтактом Тогда
						СтрокаПолучателей = СтрокаПолучателей + Получатель.Адрес;
					Иначе
						СтрокаПолучателей = СтрокаПолучателей + Получатель.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ТипСобытия = "Оплата" Тогда
				Регистратор = ПараметрыОтправки.ДополнительныеПараметры.Регистратор;
				Если (ОтправленныеДанные.Дата = Регистратор.Дата)
					И (ОтправленныеДанные.ТипСобытия  = ТипСобытия)
					И (ОтправленнаяСтрокаПолучателей  = СтрокаПолучателей)
					И (ОтправленныеДанные.Регистратор = Регистратор) Тогда
					Возврат Истина;
				КонецЕсли;
			ИначеЕсли ТипСобытия = "ОбеспеченностьТоварами" Тогда
				Если (ОтправленныеДанные.ТипСобытия  = ТипСобытия)
					И (ОтправленнаяСтрокаПолучателей = СтрокаПолучателей) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВыполнитьЗаписьДанныхОповещения(ПараметрыОтправки, СтрокаТаблицыШаблонов, Получатели)
		
	Регистратор			= ПараметрыОтправки.ДополнительныеПараметры.Регистратор;
	ТипСобытия			= ПараметрыОтправки.ДополнительныеПараметры.ТипСобытия;
	
	Если ТипСобытия = "ОбеспеченностьТоварами" Тогда
		ДнейБесплатногоХранения	= ПараметрыОтправки.ДополнительныеПараметры.ДнейБесплатногоХранения;
	Иначе	
		ДнейБесплатногоХранения	= 0;
	КонецЕсли;
	
	ОтправляемыеДанные	= Новый Структура;
	ОтправляемыеДанные.Вставить("Получатели",				Получатели);
	ОтправляемыеДанные.Вставить("ТипСобытия",				ТипСобытия);
	ОтправляемыеДанные.Вставить("ДнейБесплатногоХранения",	ДнейБесплатногоХранения);
	ОтправляемыеДанные.Вставить("Дата",						Регистратор.Дата);
	ОтправляемыеДанные.Вставить("Регистратор",				Регистратор);
	
	МенеджерЗаписи = РегистрыСведений.ДанныеПоследнихОповещений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВидОповещения              = СтрокаТаблицыШаблонов.ВидОповещения;
	МенеджерЗаписи.ИсточникОповещения         = ПараметрыОтправки.Предмет;
	МенеджерЗаписи.Подписчик                  = ПараметрыОтправки.Предмет.Партнер;
	МенеджерЗаписи.ДанныеПоследнегоОповещения = Новый ХранилищеЗначения(ОтправляемыеДанные);
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Функция СформироватьСообщениеИОтправить(ПараметрыОтправки) Экспорт
	
	СтрокаТаблицыШаблонов = ПараметрыОтправки.ДополнительныеПараметры.СтрокаТаблицыШаблонов;	
	
	Результат = Новый Структура("Отправлено, ОписаниеОшибки", Ложь);
	Сообщение = СообщениеБезШаблона(ПараметрыОтправки);

	РезультатОтправки = 0;
	
	Если ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения = "СообщениеSMS" Тогда
		
		Если Сообщение.Получатель.Количество() = 0 Тогда
			Результат.ОписаниеОшибки  = НСтр("ru = 'Для отправки сообщения необходимо ввести номер телефонов получателей.'");
			Возврат Результат;
		КонецЕсли;
		
		Если ПроверитьСостояниеОтправкиСообщения(ПараметрыОтправки, СтрокаТаблицыШаблонов, Сообщение.Получатель, "СообщениеSMS") Тогда
			Возврат Результат;	
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
			МодульОтправкаSMS = ОбщегоНазначения.ОбщийМодуль("ОтправкаSMS");
			Если МодульОтправкаSMS.ДоступнаОтправкаSMS() Тогда
				Если ПараметрыОтправки.ДополнительныеПараметры.ДляКого  = "Для клиента" Тогда
					Если ПараметрыОтправки.ДополнительныеПараметры.ОдинДокументСообщениеSMSОтправляетSMSОдномуАдресату Тогда
						Для Каждого Получатель Из Сообщение.Получатель Цикл
							НомераПолучателей = Новый Массив;
							Если ТипЗнч(Получатель) = Тип("Структура") Тогда
								НомераПолучателей.Добавить(Получатель.НомерТелефона);
							Иначе
								НомераПолучателей.Добавить(Получатель.Значение);
							КонецЕсли;
							СообщениеТекст = СтрЗаменить(Сообщение.Текст, "[ЗаказКлиента.КонтактноеЛицоНаименование]", СокрЛП(Получатель.Представление));
							Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
								Если ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия") Тогда
									Если НайтиДокументСообщениеSMS(ПараметрыОтправки.ДополнительныеПараметры.Тема, ПараметрыОтправки.ДополнительныеПараметры.Комментарий, СообщениеТекст) Тогда
										Отправлено = СоздатьИОтправитьСообщениеSMS(Сообщение, СообщениеТекст, Получатель);
										РезультатОтправки	= РезультатОтправки + Отправлено;
										ВыполнитьЗаписьДанныхОповещения(ПараметрыОтправки, СтрокаТаблицыШаблонов, Сообщение.Получатель);
									КонецЕсли;
									Результат.Отправлено	= Истина;
									Продолжить;
								КонецЕсли;
							КонецЕсли;
							РезультатОтправкаSMS = МодульОтправкаSMS.ОтправитьSMS(НомераПолучателей, СообщениеТекст, " ", Сообщение.ДополнительныеПараметры.ПеревестиВТранслит);
							Результат.Отправлено = ПустаяСтрока(РезультатОтправкаSMS.ОписаниеОшибки);
							Результат.ОписаниеОшибки = РезультатОтправкаSMS.ОписаниеОшибки;
							ВыполнитьЗаписьДанныхОповещения(ПараметрыОтправки, СтрокаТаблицыШаблонов, Сообщение.Получатель);
						КонецЦикла;
					Иначе
						НомераПолучателей = Новый Массив;
						Для Каждого Получатель Из Сообщение.Получатель Цикл
							Если ТипЗнч(Получатель) = Тип("Структура") Тогда
								НомераПолучателей.Добавить(Получатель.НомерТелефона);
							Иначе
								НомераПолучателей.Добавить(Получатель.Значение);
							КонецЕсли;
						КонецЦикла;
						Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
							Если ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия") Тогда
								Если НайтиДокументСообщениеSMS(ПараметрыОтправки.ДополнительныеПараметры.Тема, ПараметрыОтправки.ДополнительныеПараметры.Комментарий, Сообщение.Текст) Тогда
									РезультатОтправки	= СоздатьИОтправитьСообщениеSMS(Сообщение, Сообщение.Текст);
									ВыполнитьЗаписьДанныхОповещения(ПараметрыОтправки, СтрокаТаблицыШаблонов, Сообщение.Получатель);
								КонецЕсли;
								Результат.Отправлено = Истина;
								Возврат Результат;
							КонецЕсли;
						КонецЕсли;
						РезультатОтправкаSMS = МодульОтправкаSMS.ОтправитьSMS(НомераПолучателей, Сообщение.Текст, " ", Сообщение.ДополнительныеПараметры.ПеревестиВТранслит);
						ВыполнитьЗаписьДанныхОповещения(ПараметрыОтправки, СтрокаТаблицыШаблонов, Сообщение.Получатель);
						Результат.Отправлено = ПустаяСтрока(РезультатОтправкаSMS.ОписаниеОшибки);
						Результат.ОписаниеОшибки = РезультатОтправкаSMS.ОписаниеОшибки;
					КонецЕсли;
				ИначеЕсли ПараметрыОтправки.ДополнительныеПараметры.ДляКого  = "Для менеджера" Тогда
					НомераПолучателей = Новый Массив;
					Для Каждого Получатель Из Сообщение.Получатель Цикл
						Если ТипЗнч(Получатель) = Тип("Структура") Тогда
							НомераПолучателей.Добавить(Получатель.НомерТелефона);
						Иначе
							НомераПолучателей.Добавить(Получатель.Значение);
						КонецЕсли;
					КонецЦикла;
					Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
						Если ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия") Тогда
							Если НайтиДокументСообщениеSMS(ПараметрыОтправки.ДополнительныеПараметры.Тема, ПараметрыОтправки.ДополнительныеПараметры.Комментарий, Сообщение.Текст) Тогда
								РезультатОтправки	= СоздатьИОтправитьСообщениеSMS(Сообщение, Сообщение.Текст);
								ВыполнитьЗаписьДанныхОповещения(ПараметрыОтправки, СтрокаТаблицыШаблонов, Сообщение.Получатель);
							КонецЕсли;
							Результат.Отправлено	= Истина;
							Возврат Результат;
						КонецЕсли;
					КонецЕсли;
					РезультатОтправкаSMS = МодульОтправкаSMS.ОтправитьSMS(НомераПолучателей, Сообщение.Текст, " ", Сообщение.ДополнительныеПараметры.ПеревестиВТранслит);
					ВыполнитьЗаписьДанныхОповещения(ПараметрыОтправки, СтрокаТаблицыШаблонов, Сообщение.Получатель);
					Результат.Отправлено = ПустаяСтрока(РезультатОтправкаSMS.ОписаниеОшибки);
					Результат.ОписаниеОшибки = РезультатОтправкаSMS.ОписаниеОшибки;
				КонецЕсли;
			Иначе
				Результат.ОписаниеОшибки = НСтр("ru = 'Сообщение SMS не может быть отправлено сразу.'");
			КонецЕсли;
			
			Возврат Результат;
			
		КонецЕсли;
		
	Иначе
		
		Если Сообщение.Получатель.Количество() = 0 Тогда
			Результат.ОписаниеОшибки  = НСтр("ru = 'Сообщение не может быть отправлено сразу, т.к необходимо ввести адрес электронной почты.'");
			Возврат Результат;
		КонецЕсли;
		
		Если ПроверитьСостояниеОтправкиСообщения(ПараметрыОтправки, СтрокаТаблицыШаблонов, Сообщение.Получатель, "Письмо") Тогда
			Возврат Результат;	
		КонецЕсли;
		
		ПараметрыПисьма = Новый Структура();
		ПараметрыПисьма.Вставить("Тема",      Сообщение.Тема);
		ПараметрыПисьма.Вставить("Тело",      Сообщение.Текст);
		ПараметрыПисьма.Вставить("Вложения",  Новый Соответствие);
		ПараметрыПисьма.Вставить("Кодировка", "utf-8");
		
		Для каждого Вложение Из Сообщение.Вложения Цикл
			НовоеВложение = Новый Структура("ДвоичныеДанные, Идентификатор");
			НовоеВложение.ДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
			НовоеВложение.Идентификатор = Вложение.Идентификатор;
			ПараметрыПисьма.Вложения.Вставить(Вложение.Представление, НовоеВложение);
		КонецЦикла;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			МодульРаботаСПочтовымиСообщениямиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениямиСлужебный");
			Если Сообщение.ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
				ТипТекста = МодульРаботаСПочтовымиСообщениямиСлужебный.ТипТекстовЭлектронныхПисем("HTML");
			Иначе
				ТипТекста = МодульРаботаСПочтовымиСообщениямиСлужебный.ТипТекстовЭлектронныхПисем("ПростойТекст");
			КонецЕсли;
		Иначе
			ТипТекста = "";
		КонецЕсли;
		
		ПараметрыПисьма.Вставить("ТипТекста", ТипТекста);
		
		Кому = СформироватьСписокПолучателейСообщения(Сообщение.Получатель);
		ПараметрыПисьма.Вставить("Кому", Кому);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			
			МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
			Если МодульРаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем() Тогда
				УчетнаяЗапись = СтрокаТаблицыШаблонов.ГруппаРассылокИОповещений.УчетнаяЗапись;
				Если УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка() Тогда
					УчетнаяЗапись = МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
				КонецЕсли;
				Если ПараметрыОтправки.ДополнительныеПараметры.ДляКого  = "Для клиента" Тогда
					Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
						МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
						Если ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент") Тогда
							Если НайтиДокументПочтовогоСообщения(ПараметрыПисьма, ПараметрыОтправки.ДополнительныеПараметры.Комментарий) Тогда
								//МодульВзаимодействия.СоздатьПисьмо(Сообщение, УчетнаяЗапись);
								СоздатьПисьмо(Сообщение, УчетнаяЗапись);
								ВыполнитьЗаписьДанныхОповещения(ПараметрыОтправки, СтрокаТаблицыШаблонов, Сообщение.Получатель);
							КонецЕсли;
							Результат.Отправлено = Истина;
							Возврат Результат;
						КонецЕсли;
					КонецЕсли;
					МодульРаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
					ВыполнитьЗаписьДанныхОповещения(ПараметрыОтправки, СтрокаТаблицыШаблонов, Сообщение.Получатель);
					Результат.Отправлено = Истина;
				ИначеЕсли ПараметрыОтправки.ДополнительныеПараметры.ДляКого  = "Для менеджера" Тогда
					Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
						МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
						Если ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент") Тогда
							Если НайтиДокументПочтовогоСообщения(ПараметрыПисьма, ПараметрыОтправки.ДополнительныеПараметры.Комментарий) Тогда
								//МодульВзаимодействия.СоздатьПисьмо(Сообщение, УчетнаяЗапись);
								СоздатьПисьмо(Сообщение, УчетнаяЗапись);
								ВыполнитьЗаписьДанныхОповещения(ПараметрыОтправки, СтрокаТаблицыШаблонов, Сообщение.Получатель);
							КонецЕсли;
							Результат.Отправлено = Истина;
							Возврат Результат;
						КонецЕсли;
					КонецЕсли;
					МодульРаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
					ВыполнитьЗаписьДанныхОповещения(ПараметрыОтправки, СтрокаТаблицыШаблонов, Сообщение.Получатель);
					Результат.Отправлено = Истина;
				КонецЕсли;
				
			Иначе
				
				Результат.ОписаниеОшибки  = НСтр("ru = 'Сообщение не может быть отправлено сразу.'");
				Возврат Результат;
				
			КонецЕсли;
		КонецЕсли
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьИОтправитьСообщениеSMS(Сообщение, ТекстСообщения, Получатель = Неопределено) Экспорт

	СообщениеSMS = Документы.СообщениеSMS.СоздатьДокумент();
	
	СообщениеSMS.Дата                    = ТекущаяДатаСеанса();
	СообщениеSMS.Автор                   = Пользователи.ТекущийПользователь();

	СообщениеSMS.Ответственный           = Пользователи.ТекущийПользователь();
	СообщениеSMS.Важность                = Перечисления.ВариантыВажностиВзаимодействия.Обычная;

	СообщениеSMS.ВзаимодействиеОснование = Неопределено;
	СообщениеSMS.ТекстСообщения          = ТекстСообщения;
	СообщениеSMS.Тема                    = Сообщение.Тема;
	СообщениеSMS.ОтправлятьВТранслите    = Сообщение.ДополнительныеПараметры.ПеревестиВТранслит;
	СообщениеSMS.Комментарий             = КомментарийПоНаименованиюШаблона(Сообщение.ДополнительныеПараметры.Наименование);
	
	Если Получатель = Неопределено Тогда
		Для каждого АдресатSMS Из Сообщение.Получатель Цикл
			НоваяСтрока = СообщениеSMS.Адресаты.Добавить();
			Если ТипЗнч(АдресатSMS) = Тип("Структура") Тогда
				НоваяСтрока.Контакт                = АдресатSMS.ИсточникКонтактнойИнформации;
				НоваяСтрока.ПредставлениеКонтакта  = АдресатSMS.Представление;
				НоваяСтрока.КакСвязаться           = АдресатSMS.НомерТелефона;
				НоваяСтрока.НомерДляОтправки       = АдресатSMS.НомерТелефона;
			Иначе
				НоваяСтрока.Контакт                = "";
				НоваяСтрока.ПредставлениеКонтакта  = АдресатSMS.Представление;
				НоваяСтрока.КакСвязаться           = АдресатSMS.Значение;
				НоваяСтрока.НомерДляОтправки       = АдресатSMS.Значение;
			КонецЕсли;
			НоваяСтрока.ИдентификаторСообщения = "";
			НоваяСтрока.ТекстОшибки            = "";
			НоваяСтрока.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Черновик;
		КонецЦикла;
	Иначе
		НоваяСтрока = СообщениеSMS.Адресаты.Добавить();
		НоваяСтрока.Контакт                = "";
		НоваяСтрока.ПредставлениеКонтакта  = Получатель.Представление;
		НоваяСтрока.КакСвязаться           = Получатель.Значение;
		НоваяСтрока.НомерДляОтправки       = Получатель.Значение;
		НоваяСтрока.ИдентификаторСообщения = "";
		НоваяСтрока.ТекстОшибки            = "";
		НоваяСтрока.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Черновик;
	КонецЕсли;
	
	//Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
	Результат =	ОтправкаSMSПоДокументу(СообщениеSMS);
	//Иначе
	//	ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(СообщениеSMS);
	//КонецЕсли;
	
	СообщениеSMS.Записать();
	
	Если Сообщение.ДополнительныеПараметры.Свойство("Предмет") И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.Предмет) Тогда
		Предмет = Сообщение.ДополнительныеПараметры.Предмет;
	Иначе
		Предмет = СообщениеSMS.Ссылка;
	КонецЕсли;
	Реквизиты = СтруктураРеквизитовВзаимодействияДляЗаписи(Предмет, Истина);
	ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(СообщениеSMS.Ссылка, Реквизиты);
	
	Возврат Результат;	
	
КонецФункции

Процедура СоздатьПисьмо(Сообщение, УчетнаяЗапись) Экспорт
	
	ПисьмоHTML = (Сообщение.ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML);
	
	НачатьТранзакцию();
	Попытка
		
		Письмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
		
		Письмо.Автор                    = Пользователи.ТекущийПользователь();
		Письмо.Ответственный            = Пользователи.ТекущийПользователь();
		Письмо.Дата                     = ТекущаяДатаСеанса();
		Письмо.Важность                 = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		//Письмо.Кодировка                = КодировкаТекста.UTF8;
		Письмо.Кодировка                = "utf-8";
		Письмо.ОтправительПредставление = Строка(УчетнаяЗапись);
		
		Если ПисьмоHTML Тогда
			
			Письмо.ТекстHTML = Сообщение.Текст;
			Письмо.Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(Сообщение.Текст);
			
		Иначе
			
			Письмо.Текст = Сообщение.Текст;
			
		КонецЕсли;
		
		Письмо.Тема = Сообщение.Тема;
		Письмо.ТипТекста = ?(ПисьмоHTML, Перечисления.ТипыТекстовЭлектронныхПисем.HTML, Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
		Письмо.УчетнаяЗапись = УчетнаяЗапись;
		Письмо.ВзаимодействиеОснование = Неопределено;
		
		// Заполним реквизиты ВключатьТелоИсходногоПисьма, ОтображатьТелоИсходногоПисьма, УведомитьОДоставке и УведомитьОПрочтении.
		НастройкиПользователя = Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
		                           УчетнаяЗапись, Сообщение.ДополнительныеПараметры.ФорматПисьма, Истина);
		ЗаполнитьЗначенияСвойств(Письмо, НастройкиПользователя);
		
		Письмо.УдалятьПослеОтправки = Ложь;
		Письмо.Комментарий = КомментарийПоНаименованиюШаблона(Сообщение.ДополнительныеПараметры.Наименование);
		
		СписокПолучателейСпискомЗначений =( ТипЗнч(Сообщение.Получатель) = Тип("СписокЗначений"));
		Для Каждого ПолучательПисьма Из Сообщение.Получатель Цикл
			
			НоваяСтрока = Письмо["ПолучателиПисьма"].Добавить();
			
			Если СписокПолучателейСпискомЗначений Тогда
				НоваяСтрока.Адрес         = ПолучательПисьма.Значение;
				НоваяСтрока.Представление = ПолучательПисьма.Представление;
			Иначе
				НоваяСтрока.Адрес         = ПолучательПисьма.Адрес;
				НоваяСтрока.Представление = ПолучательПисьма.Представление;
				НоваяСтрока.Контакт       = ПолучательПисьма.ИсточникКонтактнойИнформации;
			КонецЕсли;
			
		КонецЦикла;
		
		Письмо.СписокПолучателейПисьма    = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиПисьма, Ложь);
		Письмо.СтатусПисьма = ?(ОбщегоНазначения.ИнформационнаяБазаФайловая(),
			Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик,
			Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее);
		
		Письмо.ЕстьВложения = (Сообщение.Вложения.Количество() > 0);
		РазмерВложений  = 0;
		РазмерыВложений = Новый Соответствие;
		Для Каждого Вложение Из Сообщение.Вложения Цикл
			
			Размер = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище).Размер() * 1.5;
			РазмерВложений = РазмерВложений + Размер;
			РазмерыВложений.Вставить(Вложение.АдресВоВременномХранилище, Размер);
			
			// Если у идентификатора не английские символы, то письмо может быть некорректно обработано.
			Если ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
				Идентификатор = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Вложение.Идентификатор);
				Письмо.ТекстHTML = СтрЗаменить(Письмо.ТекстHTML, "cid:" + Вложение.Идентификатор, "cid:" + Идентификатор);
				Вложение.Идентификатор = Идентификатор;
			КонецЕсли;
			
		КонецЦикла;
		
		Письмо.Размер = РазмерВложений + СтрДлина(Письмо.Тема) * 2
			+ ?(ПисьмоHTML, СтрДлина(Письмо.ТекстHTML), СтрДлина(Письмо.Текст)) * 2;
		
		Письмо.Записать();
		
		// Добавим вложения
		Для Каждого Вложение Из Сообщение.Вложения Цикл
			
			МодульУправлениеЭлектроннойПочтой = ОбщегоНазначения.ОбщийМодуль("УправлениеЭлектроннойПочтой");
			Если ПустаяСтрока(Вложение.Идентификатор) Тогда
				
				МодульУправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Письмо.Ссылка,
					Вложение.АдресВоВременномХранилище, Вложение.Представление, РазмерыВложений[Вложение.АдресВоВременномХранилище]);
					
			ИначеЕсли ПисьмоHTML Тогда
				
				ПрисоединенныйФайл = МодульУправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Письмо.Ссылка,
					Вложение.АдресВоВременномХранилище, Вложение.Представление, РазмерыВложений[Вложение.АдресВоВременномХранилище]);
				
				Если ПрисоединенныйФайл <> Неопределено Тогда
					ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
					ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.Идентификатор;
					ПрисоединенныйФайлОбъект.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Сообщение.ДополнительныеПараметры.Свойство("Предмет") И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.Предмет) Тогда
			Предмет = Сообщение.ДополнительныеПараметры.Предмет;
		Иначе
			Предмет = Письмо.Ссылка;
		КонецЕсли;
	
		Реквизиты = СтруктураРеквизитовВзаимодействияДляЗаписи(Предмет, Истина);
		ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Письмо.Ссылка, Реквизиты);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось создать письмо : %Письмо% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Письмо%",  Письмо);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,, Письмо, ТекстСообщения);
		Возврат;
			
	КонецПопытки;
		
	Попытка
		ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(Письмо);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при отправке письма %1'"),КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Если НЕ Письмо.УдалятьПослеОтправки Тогда
		
		Попытка
			Письмо.ИдентификаторСообщения = ИдентификаторПисьма;
			Письмо.СтатусПисьма           = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
			Письмо.ДатаОтправления        = ТекущаяДатаСеанса();
			Письмо.Записать(РежимЗаписиДокумента.Запись);
			
			ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(
				Письмо.Ссылка, Взаимодействия.ОпределитьПапкуДляПисьма(Письмо.Ссылка));
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                    НСтр("ru = 'Ошибка при записи письма после успешной отправки %1'"),
			                    КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	Иначе
		
		Письмо.Прочитать();
		Письмо.Удалить();
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру для записи в регистр сведений ПредметыПапкиВзаимодействий.
//
// Параметры:
//  Папка       - Справочник.ПапкиЭлектронныхПисем - папка, имеет смысл для документов "Электронное письмо входящее"
//               и "Электронное письмо исходящее".
//  Предмет          - СправочникСсылка, ДокументСсылка, указывает на предмет взаимодействия.
//  Рассмотрено      - Булево - признак рассмотрения взаимодействия.
//  РассмотретьПосле - ДатаВремя - дата, до которой отложено рассмотрение взаимодействия.
//  РассчитыватьРассмотрено - Булево - признак необходимости расчета состояний папки и предмета.
//
// Возвращаемое значение:
//   Структура   - сформированная структура.
//
Функция СтруктураРеквизитовВзаимодействияДляЗаписи(Предмет, Рассмотрено)
	
	СтруктураВозврата = ВзаимодействияКлиентСервер.ПустаяСтруктураРеквизитыВзаимодействия();
	
	Если Предмет <> Неопределено Тогда
		СтруктураВозврата.Предмет = Предмет;
	КонецЕсли;
	
	Если Рассмотрено <> Неопределено Тогда
		СтруктураВозврата.Рассмотрено = Рассмотрено;
	КонецЕсли;
	
	СтруктураВозврата.РассчитыватьРассмотрено = Истина;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция КомментарийПоНаименованиюШаблона(НаименованиеШаблона)

	Возврат НСтр("ru = 'Создано и отправлено по шаблону'") + " - " + НаименованиеШаблона;

КонецФункции

// Выполняет отправку сообщений SMS по переданному документу Сообщение SMS.
Функция ОтправкаSMSПоДокументу(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выполнены настройки отправки SMS.'"),,"Объект");
		ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(Документ);
		Возврат 0;
	КонецЕсли;
	
	МассивНомеров     = Документ.Адресаты.Выгрузить(,"НомерДляОтправки").ВыгрузитьКолонку("НомерДляОтправки");
	РезультатОтправки = ОтправкаSMS.ОтправитьSMS(МассивНомеров, Документ.ТекстСообщения," " , Документ.ОтправлятьВТранслите);
	
	ОтразитьРезультатыОтправкиSMSВДокументе(Документ, РезультатОтправки);
		
	Если Не ПустаяСтрока(РезультатОтправки.ОписаниеОшибки) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОтправки.ОписаниеОшибки,,"Документ");
	КонецЕсли;

	Возврат РезультатОтправки.ОтправленныеСообщения.Количество();
	
КонецФункции

// Устанавливает состояние документа "Сообщение SMS" в зависимости от состояний отдельных сообщений различным контактам.
//
// Параметры:
//  ДокументОбъект     - ДокументОбъект.СообщениеSMS - документ, для которого определяется состояние.
//  РезультатОтправки  - Структура - результат отправки сообщения SMS.
//
Процедура ОтразитьРезультатыОтправкиSMSВДокументе(ДокументОбъект, РезультатОтправки)
	
	Для Каждого ОтправленноеСообщение Из РезультатОтправки.ОтправленныеСообщения Цикл
		Для Каждого НайденнаяСтрока Из ДокументОбъект.Адресаты.НайтиСтроки(Новый Структура("НомерДляОтправки",ОтправленноеСообщение.НомерПолучателя)) Цикл
			НайденнаяСтрока.ИдентификаторСообщения = ОтправленноеСообщение.ИдентификаторСообщения;
			НайденнаяСтрока.СостояниеСообщения     = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером;
		КонецЦикла;
	КонецЦикла;
	
	ДокументОбъект.Состояние = СостояниеДокументаСообщениеSMS(ДокументОбъект);
	
КонецПроцедуры

// Определяет статус документа "Сообщение SMS" по состоянию входящих в него сообщений SMS.
//
// Параметры:
//  СообщениеSMS  - ДокументОбъект.СообщениеSMS - документ, для которого необходимо определить
//                                                статус.
//
// Возвращаемое значение:
//   Перечисления.СостоянияДокументаСообщениеSMS   - рассчитанный статус документа.
//
Функция СостояниеДокументаСообщениеSMS(СообщениеSMS)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Адресаты.СостояниеСообщения КАК Состояние
	|ПОМЕСТИТЬ Состояния
	|ИЗ
	|	&Адресаты КАК Адресаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Состояния.Состояние
	|ИЗ
	|	Состояния КАК Состояния";
	
	Запрос.УстановитьПараметр("Адресаты", СообщениеSMS.Адресаты.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Перечисления.СостоянияДокументаСообщениеSMS.Черновик;
	КонецЕсли;
	
	ТекущийСтатус = Неопределено;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.Исходящее Тогда
			
			Возврат  Перечисления.СостоянияДокументаСообщениеSMS.Исходящее;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.Черновик Тогда
			
			Возврат Перечисления.СостоянияСообщенияSMS.Черновик;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру Тогда
			
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено;
			КонецЕсли;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером 
			      ИЛИ Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером
			      ИЛИ Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера
			      ИЛИ Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеОтправленоПровайдером Тогда
			Возврат Перечисления.СостоянияДокументаСообщениеSMS.Доставляется;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.Доставлено Тогда
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено
				 ИЛИ ТекущийСтатус = Неопределено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			КонецЕсли;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеДоставлено Тогда
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено;
			КонецЕсли;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеОпознаноПровайдером Тогда
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТекущийСтатус;

КонецФункции

Функция СформироватьСписокПолучателейСообщения(СписокПолучателей)
	
	СпискаПолучателейСКонтактом = (ТипЗнч(СписокПолучателей)= Тип("Массив"));
	
	Кому = Новый Массив;
	Для каждого Получатель Из СписокПолучателей Цикл
		ПолучательСообщения = Новый Структура();
		ПолучательСообщения.Вставить("Представление", Получатель.Представление);
		
		Если СпискаПолучателейСКонтактом Тогда
			ПолучательСообщения.Вставить("Адрес",   Получатель.Адрес);
			ПолучательСообщения.Вставить("Контакт", Получатель.ИсточникКонтактнойИнформации);
		Иначе
			ПолучательСообщения.Вставить("Адрес",   Получатель.Значение);
		КонецЕсли;
		
		Кому.Добавить(ПолучательСообщения);
	КонецЦикла;
	
	Возврат Кому;

КонецФункции

Функция СообщениеБезШаблона(ПараметрыОтправки)
	
	СформированноеСообщение = КонструкторСообщения();
	СформированноеСообщение.Вставить("Тема", ПараметрыОтправки.ДополнительныеПараметры.Тема);
	СформированноеСообщение.Вставить("Текст", ПараметрыОтправки.ДополнительныеПараметры.ТекстСообщения);
	СформированноеСообщение.ДополнительныеПараметры.Вставить("Наименование", ПараметрыОтправки.ДополнительныеПараметры.Комментарий);
	//СформированноеСообщение.ДополнительныеПараметры.Вставить("Предмет", ПараметрыОтправки.Предмет);
	
	ПараметрыШаблона = ШаблоныСообщенийКлиентСервер.ОписаниеПараметровШаблона();
	Если ПараметрыОтправки.ДополнительныеПараметры.Свойство("ВидСообщения")
		И ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения = "СообщениеSMS" Тогда
		ПараметрыШаблона.ТипШаблона = "SMS";
		СформированноеСообщение.ДополнительныеПараметры.Вставить("ПеревестиВТранслит", Ложь);
	Иначе		
		СформированноеСообщение.ДополнительныеПараметры.Вставить("ФорматПисьма", ПараметрыОтправки.ДополнительныеПараметры.ФорматПисьма);
	КонецЕсли;
	
	ЗаполнитьПолучателейСообщения(ПараметрыОтправки, ПараметрыШаблона, СформированноеСообщение, Неопределено);
	
	Возврат СформированноеСообщение;
	
КонецФункции

Функция КонструкторСообщения(ПараметрыШаблона = Неопределено) Экспорт
	
	Сообщение = Новый Структура();
	Сообщение.Вставить("Тема",	"");
	Сообщение.Вставить("Текст", "");
	Сообщение.Вставить("Получатель", Новый СписокЗначений);
	Сообщение.Вставить("ДополнительныеПараметры",
		?(ПараметрыШаблона <> Неопределено, ПараметрыШаблона, Новый Структура()));
	Сообщение.Вставить("СообщенияПользователю", Новый Массив());
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	Вложения = Новый ТаблицаЗначений;
	Вложения.Колонки.Добавить("Представление", ТипСтрока);
	Вложения.Колонки.Добавить("АдресВоВременномХранилище", ТипСтрока);
	Вложения.Колонки.Добавить("Кодировка", ТипСтрока);
	Вложения.Колонки.Добавить("Идентификатор", ТипСтрока);
	Сообщение.Вставить("Вложения", Вложения);
	
	Если ПараметрыШаблона <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Сообщение, ПараметрыШаблона);
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Процедура ЗаполнитьПолучателейСообщения(ПараметрыОтправки, ПараметрыШаблона, Результат, МенеджерОбъекта)
	
	Если ПараметрыОтправки.Свойство("ДополнительныеПараметры")
		И ПараметрыОтправки.ДополнительныеПараметры.Свойство("ПроизвольныеПараметры") Тогда
		
		ПредметСообщения = Новый Структура("Предмет, ПроизвольныеПараметры");
		ПредметСообщения.Предмет               = ПараметрыОтправки.Предмет;
		ПредметСообщения.ПроизвольныеПараметры = ПараметрыОтправки.ДополнительныеПараметры.ПроизвольныеПараметры;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПредметСообщения, ПараметрыОтправки.ДополнительныеПараметры, Ложь);
		
	Иначе
		
		ПредметСообщения = ПараметрыОтправки.Предмет;
		
	КонецЕсли;
	
	Если ПараметрыШаблона.ТипШаблона = "Письмо" Тогда
		Получатели = СформироватьПолучателейПоУмолчанию(ПараметрыОтправки.Предмет, ПараметрыШаблона.ТипШаблона);
		Если ПараметрыОтправки.ДополнительныеПараметры.ДляКого = "Для клиента" Тогда
			ШаблоныСообщенийПереопределяемый.ПриЗаполненииПочтыПолучателейВСообщении(Получатели, ПараметрыШаблона.ПолноеИмяТипаНазначения, ПредметСообщения);
		Иначе
			КонтактнаяИнформация(Получатели, ПараметрыОтправки.Предмет.Менеджер, ПараметрыШаблона.ТипШаблона);
		КонецЕсли;
		Если МенеджерОбъекта <> Неопределено Тогда
			МенеджерОбъекта.ПриЗаполненииПочтыПолучателейВСообщении(Получатели, ПредметСообщения);
		КонецЕсли;
		
		Если ПараметрыШаблона.Свойство("РасширенныйСписокПолучателей")
			И ПараметрыШаблона.РасширенныйСписокПолучателей Тогда
			
			Результат.Получатель = Новый Массив;
			Для каждого Получатель Из Получатели Цикл
				Если ЗначениеЗаполнено(Получатель.Адрес) Тогда
					ЗначениеПолучателя = Новый Структура("Адрес, Представление, ИсточникКонтактнойИнформации", 
					Получатель.Адрес, Получатель.Представление, Получатель.Контакт);
					Результат.Получатель.Добавить(ЗначениеПолучателя);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Для каждого Получатель Из Получатели Цикл
				Если ЗначениеЗаполнено(Получатель.Адрес) Тогда
					Результат.Получатель.Добавить(Получатель.Адрес, Получатель.Представление);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Получатели = СформироватьПолучателейПоУмолчанию(ПараметрыОтправки.Предмет, ПараметрыШаблона.ТипШаблона);
		Если ПараметрыОтправки.ДополнительныеПараметры.ДляКого = "Для клиента" Тогда
			ШаблоныСообщенийПереопределяемый.ПриЗаполненииТелефоновПолучателейВСообщении(Получатели, ПараметрыШаблона.ПолноеИмяТипаНазначения, ПредметСообщения);
		Иначе
			КонтактнаяИнформация(Получатели, ПараметрыОтправки.Предмет.Менеджер, ПараметрыШаблона.ТипШаблона);
		КонецЕсли;
		Если МенеджерОбъекта <> Неопределено Тогда
			МенеджерОбъекта.ПриЗаполненииТелефоновПолучателейВСообщении(Получатели, ПредметСообщения);
		КонецЕсли;
		
		Если ПараметрыШаблона.Свойство("РасширенныйСписокПолучателей")
			И ПараметрыШаблона.РасширенныйСписокПолучателей Тогда
			
			Результат.Получатель = Новый Массив;
			Для каждого Получатель Из Получатели Цикл
				Если ЗначениеЗаполнено(Получатель.НомерТелефона) Тогда
					ЗначениеПолучателя = Новый Структура("НомерТелефона, Представление, ИсточникКонтактнойИнформации", 
					Получатель.НомерТелефона, Получатель.Представление, Получатель.Контакт);
					Результат.Получатель.Добавить(ЗначениеПолучателя);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Для каждого Получатель Из Получатели Цикл
				Если ЗначениеЗаполнено(Получатель.НомерТелефона) Тогда
					Результат.Получатель.Добавить(Получатель.НомерТелефона, Получатель.Представление);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПолучателейПоУмолчанию(Предмет, ТипШаблона);
	
	Получатели = Новый ТаблицаЗначений;
	Получатели.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Получатели.Колонки.Добавить("Контакт");
	Если СтрСравнить(ТипШаблона, "SMS") = 0 Тогда
		Получатели.Колонки.Добавить("НомерТелефона", Новый ОписаниеТипов("Строка"));
		ИмяКолонки = "НомерТелефона";
	Иначе
		Получатели.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
		ИмяКолонки = "Адрес";
	КонецЕсли;
	
	Если Предмет = Неопределено Тогда
		Возврат Получатели;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		
		ТипКонтактнойИнформации = ?(СтрСравнить(ТипШаблона, "SMS") = 0,
		МодульУправлениеКонтактнойИнформацией.ТипКонтактнойИнформацииПоНаименованию("Телефон"),
		МодульУправлениеКонтактнойИнформацией.ТипКонтактнойИнформацииПоНаименованию("АдресЭлектроннойПочты"));

		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
			МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
			//
			//Если МодульВзаимодействия.ИспользуетсяПочтовыйКлиент() Тогда
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент") Тогда
				Контакты = МодульВзаимодействия.ПолучитьКонтактыПоПредмету(Предмет, ТипКонтактнойИнформации);
				
				Для каждого ИнформацияОКонтакте Из Контакты Цикл
					НоваяСтрока = Получатели.Добавить();
					НоваяСтрока.Контакт       = ИнформацияОКонтакте.Контакт;
					НоваяСтрока.Представление = ИнформацияОКонтакте.Представление;
					НоваяСтрока[ИмяКолонки]   = ИнформацияОКонтакте.Адрес;
				КонецЦикла;
			КонецЕсли;
				
		КонецЕсли;
	
		// Если список контактов пустой, а у объекта есть контактная информация.
		Если Получатели.Количество() = 0 И ТипЗнч(Предмет) <> Тип("Строка") Тогда
			ОбъектыСКонтактнойИнформацией = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Предмет);
			
			ВидыКонтактнойИнформацияОбъекта = МодульУправлениеКонтактнойИнформацией.ВидыКонтактнойИнформацияОбъекта(Предмет);
			Если ВидыКонтактнойИнформацияОбъекта.Количество() > 0 Тогда
				КонтактнаяИнформацияОбъектов = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ОбъектыСКонтактнойИнформацией, ТипКонтактнойИнформации,, ТекущаяДатаСеанса());
				Если КонтактнаяИнформацияОбъектов.Количество() > 0 Тогда
					Для каждого КонтактнаяИнформацияОбъекта Из КонтактнаяИнформацияОбъектов Цикл
						НоваяСтрока= Получатели.Добавить();
						НоваяСтрока[ИмяКолонки]   = КонтактнаяИнформацияОбъекта.Представление;
						НоваяСтрока.Представление = СтрЗаменить(Строка(КонтактнаяИнформацияОбъекта.Объект), ",", "");
						НоваяСтрока.Контакт       = Предмет;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Получатели;
	
КонецФункции

Функция КонтактнаяИнформация(Контакты, Менеджер, ТипШаблона)
	
	ТипыСсылки = Новый Массив;
	ТипыСсылки.Добавить(Тип("СправочникСсылка.Пользователи"));
	ТипыСсылки.Добавить(Тип("СправочникСсылка.ВнешниеПользователи"));
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат Контакты;
	КонецЕсли;
	
	ЗаполнитьКонтакты		= Ложь;
	ПолеТелефон          	= Новый ПолеКомпоновкиДанных("Телефон");
	ПолеЭлектронныйАдрес 	= Новый ПолеКомпоновкиДанных("ЭлектронныйАдрес");
	
	ВидыКонтактнойИнформации = Новый Массив;
	ВидыКонтактнойИнформации.Добавить(Справочники["ВидыКонтактнойИнформации"].EmailПользователя);
	ВидыКонтактнойИнформации.Добавить(Справочники["ВидыКонтактнойИнформации"].ТелефонПользователя);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыКонтактнойИнформации", ВидыКонтактнойИнформации);
	Запрос.УстановитьПараметр("Ссылка", Менеджер);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПользователиКонтактнаяИнформация.Ссылка.Наименование КАК Представление,
	|	ПользователиКонтактнаяИнформация.Вид КАК Вид,
	|	ПользователиКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	|	ПользователиКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Вид В(&ВидыКонтактнойИнформации)
	|	И ПользователиКонтактнаяИнформация.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПользователиКонтактнаяИнформация.Ссылка,
	|	ПользователиКонтактнаяИнформация.Тип.Порядок,
	|	ПользователиКонтактнаяИнформация.Вид";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТипШаблона = "Письмо" Тогда
			Если ЗначениеЗаполнено(Выборка.АдресЭП) Тогда
				НоваяСтрока = Контакты.Добавить();
				НоваяСтрока.Контакт				= Выборка.Ссылка;
				НоваяСтрока.Адрес				= Выборка.АдресЭП;
				НоваяСтрока.Представление		= Выборка.Представление;
			КонецЕсли;
		Иначе	
			Если ЗначениеЗаполнено(Выборка.НомерТелефона) Тогда
				НоваяСтрока					= Контакты.Добавить();
				НоваяСтрока.Контакт			= Выборка.Ссылка;
				НоваяСтрока.НомерТелефона	= Выборка.НомерТелефона;
				НоваяСтрока.Представление	= Выборка.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Контакты;
	
КонецФункции

#КонецОбласти
//ОООООООООООООООООООООООООООООООО ОТПРАВКА ОПОВЕЩЕНИЙ КОНЕЦ

//ОООООООООООООООООООООООООООООООО СОЗДАНИЕ ПРЕДОПРЕДЕЛЕННЫХ ШАБЛОНОВ СООБЩЕНИЙ НАЧАЛО
#Область СозданиеПредопределенныхШаблоновСообщений

Функция СоздатьПредопределенныеШаблоныСообщений() Экспорт
	
	МассивСозданныхВидовОповещений = Новый Массив;
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		Возврат МассивСозданныхВидовОповещений;
	КонецЕсли;
	
	МодульШаблоныСообщений = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщений");
	
	ПредопределенныеШаблоныСообщений = Новый Массив;
	ПредопределенныеШаблоныСообщений(ПредопределенныеШаблоныСообщений);
	
	Если Не ПредопределенныеШаблоныСообщений.Количество() Тогда 
		Возврат МассивСозданныхВидовОповещений;
	КонецЕсли;
	
	Для Каждого Шаблон Из ПредопределенныеШаблоныСообщений Цикл 
		Если Шаблон.ТипШаблона = "SMS" Тогда
			ШаблонСообщенийСсылка = ПолучитьШаблонСообщения(Шаблон);
			Если ШаблонСообщенийСсылка = Неопределено Тогда
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Шаблон.ПолноеИмяТипаНазначения);
				Если ОбъектМетаданных = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда 
					Продолжить;
				КонецЕсли;
				ПараметрыШаблона = МодульШаблоныСообщений.ОписаниеПараметровШаблона();
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыШаблона, Шаблон, Истина);
				ПараметрыШаблона.Вставить("ПредназначенДляSMS", Истина);
				ШаблонСообщенийСсылка = МодульШаблоныСообщений.СоздатьШаблон(Шаблон.Наименование, ПараметрыШаблона);
			КонецЕсли;
			ВидОповещенияСсылка = НайтиСоздатьПредопределенныйВидОповещенияДляSMS(ШаблонСообщенийСсылка);
			МассивСозданныхВидовОповещений.Добавить(ВидОповещенияСсылка);
		ИначеЕсли Шаблон.ТипШаблона = "Письмо" Тогда
			ШаблонСообщенийСсылка = ПолучитьШаблонСообщения(Шаблон);
			Если ШаблонСообщенийСсылка = Неопределено Тогда
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Шаблон.ПолноеИмяТипаНазначения);
				Если ОбъектМетаданных = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда 
					Продолжить;
				КонецЕсли;
				ПараметрыШаблона = МодульШаблоныСообщений.ОписаниеПараметровШаблона();
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыШаблона, Шаблон, Истина);
				ПараметрыШаблона.Вставить("ПредназначенДляВводаНаОсновании", Истина);
				ПараметрыШаблона.Вставить("ПредназначенДляЭлектронныхПисем", Истина);
				ПараметрыШаблона.Вставить("ФорматПисьма",
				ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML"));
				ШаблонСообщенийСсылка = МодульШаблоныСообщений.СоздатьШаблон(Шаблон.Наименование, ПараметрыШаблона);
			КонецЕсли;
			ВидОповещенияСсылка = НайтиСоздатьПредопределенныйВидОповещенияДляПисем(ШаблонСообщенийСсылка);
			МассивСозданныхВидовОповещений.Добавить(ВидОповещенияСсылка);
		КонецЕсли;
	КонецЦикла;
	
	НайтиСоздатьПредопределеннуюГруппуОповещений(МассивСозданныхВидовОповещений);
	
	//Возврат МассивСозданныхШаблонов;
	Возврат МассивСозданныхВидовОповещений;
	
КонецФункции

Функция НайтиСоздатьПредопределенныйВидОповещенияДляSMS(ШаблонСообщенийСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыОповещенийКлиентам.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыОповещенийКлиентам КАК ВидыОповещенийКлиентам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|		ПО (ВидыОповещенийКлиентам.ШаблонСообщенияSMS = ШаблоныСообщений.Ссылка)
		|ГДЕ
		|	ВидыОповещенийКлиентам.Наименование ПОДОБНО &Наименование
		|	И ШаблоныСообщений.Ссылка = &ШаблоныСообщений
		|";
	
	Запрос.УстановитьПараметр("ШаблоныСообщений", ШаблонСообщенийСсылка);
	Если СокрЛП(ШаблонСообщенийСсылка.Наименование) = "Оплата заказа клиента (полная, SMS клиенту)" Тогда
		НаименованиеВидаОповещения = "Полная оплата заказа (SMS клиенту)";
		ТипСобытия = Перечисления.ТипыСобытийОповещений.ПоступлениеОплатыОтКлиента;
	ИНачеЕсли СокрЛП(ШаблонСообщенийСсылка.Наименование) = "Оплата заказа клиента (частичная, SMS клиенту)" Тогда
		НаименованиеВидаОповещения = "Частичная оплата заказа (SMS клиенту)";
		ТипСобытия = Перечисления.ТипыСобытийОповещений.ПоступлениеОплатыОтКлиента;
	ИНачеЕсли СокрЛП(ШаблонСообщенийСсылка.Наименование) = "Оплата заказа клиента (полная, SMS менеджеру)" Тогда
		НаименованиеВидаОповещения = "Полная оплата заказа (SMS менеджеру)";
		ТипСобытия = Перечисления.ТипыСобытийОповещений.ПоступлениеОплатыОтКлиента;
	ИНачеЕсли СокрЛП(ШаблонСообщенийСсылка.Наименование) = "Оплата заказа клиента (частичная, SMS менеджеру)" Тогда
		НаименованиеВидаОповещения = "Частичная оплата заказа (SMS менеджеру)";
		ТипСобытия = Перечисления.ТипыСобытийОповещений.ПоступлениеОплатыОтКлиента;
	ИНачеЕсли СокрЛП(ШаблонСообщенийСсылка.Наименование) = "Товары по заказу клиента готовы (SMS клиенту)" Тогда
		НаименованиеВидаОповещения = "Наличие товаров по заказу (SMS клиенту)";
		ТипСобытия = Перечисления.ТипыСобытийОповещений.ПлановыеОтгрузки;
	ИНачеЕсли СокрЛП(ШаблонСообщенийСсылка.Наименование) = "Товары по заказу клиента готовы (SMS менеджеру)" Тогда
		НаименованиеВидаОповещения = "Наличие товаров по заказу (SMS менеджеру)";
		ТипСобытия = Перечисления.ТипыСобытийОповещений.ПлановыеОтгрузки;
	КонецЕсли;
	Запрос.УстановитьПараметр("Наименование", "%" + НаименованиеВидаОповещения + "%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ВидОповещения = Справочники.ВидыОповещенийКлиентам.СоздатьЭлемент();
		ВидОповещения.Наименование						= НаименованиеВидаОповещения;
		ВидОповещения.ТипСобытия						= ТипСобытия;
		ВидОповещения.ШаблонЭлектронногоПисьма			= Справочники.ШаблоныСообщений.ПустаяСсылка();
		ВидОповещения.ШаблонСообщенияSMS				= ШаблонСообщенийСсылка;
		ВидОповещения.ПредназначенаДляSMS 				= Истина;
		ВидОповещения.ПредназначенаДляЭлектронныхПисем 	= Ложь;
		ВидОповещения.ИспользуетсяУсловиеОтправки		= Ложь;
		ВидОповещения.Записать();
		ВидОповещенияСсылка = ВидОповещения.Ссылка;
	Иначе	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВидОповещенияСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВидОповещенияСсылка;
	
КонецФункции

Функция НайтиСоздатьПредопределенныйВидОповещенияДляПисем(ШаблонСообщенийСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыОповещенийКлиентам.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыОповещенийКлиентам КАК ВидыОповещенийКлиентам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|		ПО (ВидыОповещенийКлиентам.ШаблонЭлектронногоПисьма = ШаблоныСообщений.Ссылка)
		|ГДЕ
		|	ВидыОповещенийКлиентам.Наименование ПОДОБНО &Наименование
		|	И ШаблоныСообщений.Ссылка = &ШаблоныСообщений
		|";
	
	Запрос.УстановитьПараметр("ШаблоныСообщений", ШаблонСообщенийСсылка);
	Если СокрЛП(ШаблонСообщенийСсылка.Наименование) = "Оплата заказа клиента (полная, письмо клиенту)" Тогда
		НаименованиеВидаОповещения = "Полная оплата заказа (e-mail клиенту)";
		ТипСобытия = Перечисления.ТипыСобытийОповещений.ПоступлениеОплатыОтКлиента;
	ИНачеЕсли СокрЛП(ШаблонСообщенийСсылка.Наименование) = "Оплата заказа клиента (частичная, письмо клиенту)" Тогда
		НаименованиеВидаОповещения = "Частичная оплата заказа (e-mail клиенту)";
		ТипСобытия = Перечисления.ТипыСобытийОповещений.ПоступлениеОплатыОтКлиента;
	ИНачеЕсли СокрЛП(ШаблонСообщенийСсылка.Наименование) = "Оплата заказа клиента (полная, письмо менеджеру)" Тогда
		НаименованиеВидаОповещения = "Полная оплата заказа (e-mail менеджеру)";
		ТипСобытия = Перечисления.ТипыСобытийОповещений.ПоступлениеОплатыОтКлиента;
	ИНачеЕсли СокрЛП(ШаблонСообщенийСсылка.Наименование) = "Оплата заказа клиента (частичная, письмо менеджеру)" Тогда
		НаименованиеВидаОповещения = "Частичная оплата заказа (e-mail менеджеру)";
		ТипСобытия = Перечисления.ТипыСобытийОповещений.ПоступлениеОплатыОтКлиента;
	ИНачеЕсли СокрЛП(ШаблонСообщенийСсылка.Наименование) = "Товары по заказу клиента готовы (письмо клиенту)" Тогда
		НаименованиеВидаОповещения = "Наличие товаров по заказу (e-mail клиенту)";
		ТипСобытия = Перечисления.ТипыСобытийОповещений.ПлановыеОтгрузки;
	ИНачеЕсли СокрЛП(ШаблонСообщенийСсылка.Наименование) = "Товары по заказу клиента готовы (письмо менеджеру)" Тогда
		НаименованиеВидаОповещения = "Наличие товаров по заказу (e-mail менеджеру)";
		ТипСобытия = Перечисления.ТипыСобытийОповещений.ПлановыеОтгрузки;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Наименование", "%" + НаименованиеВидаОповещения + "%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ВидОповещения = Справочники.ВидыОповещенийКлиентам.СоздатьЭлемент();
		ВидОповещения.Наименование						= НаименованиеВидаОповещения;
		ВидОповещения.ТипСобытия						= ТипСобытия;
		ВидОповещения.ШаблонСообщенияSMS				= Справочники.ШаблоныСообщений.ПустаяСсылка();
		ВидОповещения.ШаблонЭлектронногоПисьма			= ШаблонСообщенийСсылка;
		ВидОповещения.ПредназначенаДляЭлектронныхПисем 	= Истина;
		ВидОповещения.ПредназначенаДляSMS 				= Ложь;
		ВидОповещения.ИспользуетсяУсловиеОтправки		= Ложь;
		ВидОповещения.Записать();
		ВидОповещенияСсылка = ВидОповещения.Ссылка;
	Иначе	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВидОповещенияСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВидОповещенияСсылка;
	
КонецФункции

Процедура ПредопределенныеШаблоныСообщений(Шаблоны) Экспорт
	
//ШАБЛОНЫ SMS НАЧАЛО
	//Оплата заказа клиента (полная, SMS клиенту)
	Шаблон = Новый Структура();
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ЗаказКлиента");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Оплата заказа клиента (полная, SMS клиенту)'"));
	Шаблон.Вставить("ТипШаблона", "SMS");
	Шаблон.Вставить("Тема", "");
	ТекстШаблона = 
		"Добрый день [ЗаказКлиента.КонтактноеЛицоНаименование]!
		|От Вас поступила оплата:
		|[ЗаказКлиента.ДатаОплаты] г.; сумма [ЗаказКлиента.СуммаОплачено] руб.;
		|оплата заказа № [ЗаказКлиента.Номер] от [ЗаказКлиента.Дата] г.";
	
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
	
	//Оплата заказа клиента (частичная, SMS клиенту)
	Шаблон = Новый Структура();
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ЗаказКлиента");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Оплата заказа клиента (частичная, SMS клиенту)'"));
	Шаблон.Вставить("ТипШаблона", "SMS");
	Шаблон.Вставить("Тема", "");
	ТекстШаблона = 
		"Добрый день [ЗаказКлиента.КонтактноеЛицоНаименование]!
		|От Вас поступила оплата:
		|[ЗаказКлиента.ДатаОплаты] г.; сумма [ЗаказКлиента.СуммаОплачено] руб.;
		|оплата заказа № [ЗаказКлиента.Номер] от [ЗаказКлиента.Дата] г.
		|Оставшаяся сумма платежа равна [ЗаказКлиента.ОставщийсяДолгКлиента] руб.";		
		
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
	
	//Оплата заказа клиента (полная, SMS менеджеру)
	Шаблон = Новый Структура();
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ЗаказКлиента");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Оплата заказа клиента (полная, SMS менеджеру)'"));
	Шаблон.Вставить("ТипШаблона", "SMS");
	Шаблон.Вставить("Тема", "");
	ТекстШаблона = 
		"Поступила оплата:
		|[ЗаказКлиента.ДатаОплаты] г.; сумма [ЗаказКлиента.СуммаОплачено] руб.;
		|Заказ № [ЗаказКлиента.Номер] от [ЗаказКлиента.Дата] г.";	
	
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
	
	//Оплата заказа клиента (частичная, SMS менеджеру)
	Шаблон = Новый Структура();
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ЗаказКлиента");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Оплата заказа клиента (частичная, SMS менеджеру)'"));
	Шаблон.Вставить("ТипШаблона", "SMS");
	Шаблон.Вставить("Тема", "");
	ТекстШаблона = 
		"Поступила оплата:
		|[ЗаказКлиента.ДатаОплаты] г.; сумма [ЗаказКлиента.СуммаОплачено] руб.;
		|Заказ № [ЗаказКлиента.Номер] от [ЗаказКлиента.Дата] г.
		|Оставшаяся сумма платежа равна [ЗаказКлиента.ОставщийсяДолгКлиента] руб.";		
		
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
	
//---------	
	//Готовность товаров к отгрузке (SMS клиенту)
	Шаблон = Новый Структура();
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ЗаказКлиента");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Товары по заказу клиента готовы (SMS клиенту)'"));
	Шаблон.Вставить("ТипШаблона", "SMS");
	Шаблон.Вставить("Тема", "О готовности товаров к отгрузке");
	ТекстШаблона = 
		"Добрый день [ЗаказКлиента.КонтактноеЛицоНаименование]!
		|Все товары по заказу № [ЗаказКлиента.Номер] от [ЗаказКлиента.Дата] г.
		|готовы к отгрузке. Дней бесплатного хранения: [ЗаказКлиента.ДнейБесплатногоХранения]
		|Ваш менеджер [ЗаказКлиента.Менеджер],
		|т. [ЗаказКлиента.ТелефонОрганизации]";
    
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
	
	//Готовность товаров к отгрузке (SMS менеджеру)
	Шаблон = Новый Структура();
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ЗаказКлиента");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Товары по заказу клиента готовы (SMS менеджеру)'"));
	Шаблон.Вставить("ТипШаблона", "SMS");
	Шаблон.Вставить("Тема", "О готовности товаров к отгрузке");
	ТекстШаблона = 
		"Все товары по заказу № [ЗаказКлиента.Номер] от [ЗаказКлиента.Дата] г.
		|готовы к отгрузке.";
	    
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
//---------	
//ШАБЛОНЫ SMS КОНЕЦ

//ШАБЛОНЫ ПИСЕМ НАЧАЛО
	//Оплата заказа клиента (полная, письмо клиенту)
	Шаблон = Новый Структура();
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ЗаказКлиента");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Оплата заказа клиента (полная, письмо клиенту)'"));
	Шаблон.Вставить("ТипШаблона", "Письмо");
	Шаблон.Вставить("Тема", "");
	ТекстШаблона = 
		"<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;}
		|p{line-height:1.15;margin:0;white-space:pre-wrap;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|li>p{display:inline;}
		|</style>
		|</head>
		|<body>
		|<p>Добрый день [ЗаказКлиента.КонтактноеЛицоНаименование]!<br>От Вас поступила оплата:<br>[ЗаказКлиента.ДатаОплаты] г.; сумма [ЗаказКлиента.СуммаОплачено] руб.;<br>оплата заказа № [ЗаказКлиента.Номер] от [ЗаказКлиента.Дата] г.</p>
		|</body>
		|</html>	
		|";
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
	
	//Оплата заказа клиента (частичная, письмо клиенту)
	Шаблон = Новый Структура();
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ЗаказКлиента");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Оплата заказа клиента (частичная, письмо клиенту)'"));
	Шаблон.Вставить("ТипШаблона", "Письмо");
	Шаблон.Вставить("Тема", "");
	ТекстШаблона = 
		"<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;}
		|p{line-height:1.15;margin:0;white-space:pre-wrap;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|li>p{display:inline;}
		|</style>
		|</head>
		|<body>
		|<p>Добрый день [ЗаказКлиента.КонтактноеЛицоНаименование]!<br>От Вас поступила оплата:<br>[ЗаказКлиента.ДатаОплаты] г.; сумма [ЗаказКлиента.СуммаОплачено] руб.;<br>оплата заказа № [ЗаказКлиента.Номер] от [ЗаказКлиента.Дата] г.<br>Оставшаяся сумма платежа равна [ЗаказКлиента.ОставщийсяДолгКлиента] руб.</p>
		|</body>
		|</html>	
		|";
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
	
	//Оплата заказа клиента (полная, письмо менеджеру)
	Шаблон = Новый Структура();
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ЗаказКлиента");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Оплата заказа клиента (полная, письмо менеджеру)'"));
	Шаблон.Вставить("ТипШаблона", "Письмо");
	Шаблон.Вставить("Тема", "");
	ТекстШаблона = 
		"<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;}
		|p{line-height:1.15;margin:0;white-space:pre-wrap;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|li>p{display:inline;}
		|</style>
		|</head>
		|<body>
		|<p>Поступила оплата:<br>[ЗаказКлиента.ДатаОплаты] г.; сумма [ЗаказКлиента.СуммаОплачено] руб.;<br>Заказ № [ЗаказКлиента.Номер] от [ЗаказКлиента.Дата] г.</p>
		|</body>
		|</html>	
		|";
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
	
	//Оплата заказа клиента (частичная, письмо менеджеру)
	Шаблон = Новый Структура();
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ЗаказКлиента");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Оплата заказа клиента (частичная, письмо менеджеру)'"));
	Шаблон.Вставить("ТипШаблона", "Письмо");
	Шаблон.Вставить("Тема", "");
	ТекстШаблона = 
		"<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;}
		|p{line-height:1.15;margin:0;white-space:pre-wrap;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|li>p{display:inline;}
		|</style>
		|</head>
		|<body>
		|<p>Поступила оплата:<br>[ЗаказКлиента.ДатаОплаты] г.; сумма [ЗаказКлиента.СуммаОплачено] руб.;<br>Заказ № [ЗаказКлиента.Номер] от [ЗаказКлиента.Дата] г.<br>Оставшаяся сумма платежа равна [ЗаказКлиента.ОставщийсяДолгКлиента] руб.    </p>
		|</body>
		|</html>	
		|";
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
	
//---------------	
	//Готовность товаров к отгрузке (письмо клиенту)
	Шаблон = Новый Структура();
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ЗаказКлиента");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Товары по заказу клиента готовы (письмо клиенту)'"));
	Шаблон.Вставить("ТипШаблона", "Письмо");
	Шаблон.Вставить("Тема", "О готовности товаров к отгрузке");
	ТекстШаблона = 
		"<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;}
		|p{line-height:1.15;margin:0;white-space:pre-wrap;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|li>p{display:inline;}
		|</style>
		|</head>
		|<body>
		|<p>Добрый день [ЗаказКлиента.КонтактноеЛицоНаименование]!<br>Все товары по заказу № [ЗаказКлиента.Номер] от [ЗаказКлиента.Дата] г. готовы к отгрузке.<br>Дней бесплатного хранения: [ЗаказКлиента.ДнейБесплатногоХранения].<br>Ваш менеджер [ЗаказКлиента.Менеджер], т. [ЗаказКлиента.ТелефонОрганизации]</p>
		|</body>
		|</html>	
		|";

	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
	
	//Готовность товаров к отгрузке (письмо менеджеру)
	Шаблон = Новый Структура();
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ЗаказКлиента");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Товары по заказу клиента готовы (письмо менеджеру)'"));
	Шаблон.Вставить("ТипШаблона", "Письмо");
	Шаблон.Вставить("Тема", "О готовности товаров к отгрузке");
	ТекстШаблона = 
		"<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;}
		|p{line-height:1.15;margin:0;white-space:pre-wrap;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|li>p{display:inline;}
		|</style>
		|</head>
		|<body>
		|<p>Все товары по заказу № [ЗаказКлиента.Номер] от [ЗаказКлиента.Дата] г. готовы к отгрузке.</p>
		|</body>
		|</html>	
		|";
	
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
//ШАБЛОНЫ ПИСЕМ КОНЕЦ
	
КонецПроцедуры

Функция ПолучитьШаблонСообщения(Шаблон, Предмет = Неопределено, ВладелецШаблона = Неопределено, ВыводитьОбщиеШаблон = Истина)
	
	Если Шаблон.ТипШаблона = "SMS" Тогда
		ПредназначенДляSMS = Истина;
		ПредназначенДляЭлектронныхПисем = Ложь;
	Иначе
		ПредназначенДляSMS = Ложь;
		ПредназначенДляЭлектронныхПисем = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШаблоныСообщений.Ссылка
	|ИЗ
	|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	|ГДЕ
	|	НЕ ШаблоныСообщений.ПометкаУдаления 
	|	И (ШаблоныСообщений.ТолькоДляАвтора = ЛОЖЬ ИЛИ ШаблоныСообщений.Автор = &Пользователь)
	|	И ШаблоныСообщений.ПредназначенДляSMS = &ПредназначенДляSMS
	|	И ШаблоныСообщений.ПредназначенДляЭлектронныхПисем = &ПредназначенДляЭлектронныхПисем
	|	И ШаблоныСообщений.Наименование ПОДОБНО &Наименование
	|	И ШаблоныСообщений.Назначение ПОДОБНО &Назначение
	|";
	Запрос.УстановитьПараметр("Наименование",					"%" + Шаблон.Наименование + "%");
	Запрос.УстановитьПараметр("Назначение",						"%Заказ клиента%");
	Запрос.УстановитьПараметр("ПредназначенДляSMS",				ПредназначенДляSMS);
	Запрос.УстановитьПараметр("ПредназначенДляЭлектронныхПисем",ПредназначенДляЭлектронныхПисем);
	Запрос.УстановитьПараметр("Пользователь",					Пользователи.АвторизованныйПользователь());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		ШаблонСообщенийСсылка = РезультатЗапроса[0].Ссылка;
	Иначе
		ШаблонСообщенийСсылка = Неопределено;			
	КонецЕсли;
	
	Возврат ШаблонСообщенийСсылка;
	
КонецФункции

Функция ТребуетсяНастройкаКИКонтактногоЛица(Объект)

	Возврат Не Объект.Принудительная 
	        ИЛИ Объект.ОтправлятьКонтактномуЛицуОбъектаОповещения 
	        ИЛИ Объект.ОтправлятьКонтактнымЛицамРоли;

КонецФункции

Функция ТребуетсяНастройкаКИПартнера(Объект)

	Возврат НЕ Объект.Принудительная ИЛИ Объект.ОтправлятьПартнеру;

КонецФункции

Процедура ЗаполнитьВидыКИПоУмолчанию(Объект)

	СтруктураСписковВыбора				= РассылкиИОповещенияКлиентам.СтруктураСписковВыбораКИ();
	ТребуетсяНастройкаКИКонтактногоЛица = ТребуетсяНастройкаКИКонтактногоЛица(Объект);
	ТребуетсяНастройкаКИПартнера        = ТребуетсяНастройкаКИПартнера(Объект);
	
	Если Объект.ПредназначенаДляSMS Тогда
		
		Если Объект.ВидКонтактнойИнформацииПартнераДляSMS.Пустая()
			И ТребуетсяНастройкаКИПартнера
			И СтруктураСписковВыбора.ПартнерыТелефон.Количество() > 0 Тогда
			
			Объект.ВидКонтактнойИнформацииПартнераДляSMS = СтруктураСписковВыбора.ПартнерыТелефон.Получить(0).Значение;
			
		КонецЕсли;
		
		Если Объект.ВидКонтактнойИнформацииКонтактногоЛицаДляSMS.Пустая()
			И ТребуетсяНастройкаКИКонтактногоЛица
			И СтруктураСписковВыбора.КонтактныеЛицаТелефон.Количество() > 0 Тогда
			
			Объект.ВидКонтактнойИнформацииКонтактногоЛицаДляSMS = СтруктураСписковВыбора.КонтактныеЛицаТелефон.Получить(0).Значение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ПредназначенаДляЭлектронныхПисем Тогда
		
		Если Объект.ВидКонтактнойИнформацииКонтактногоЛицаДляПисем.Пустая()
			И ТребуетсяНастройкаКИКонтактногоЛица
			И СтруктураСписковВыбора.КонтактныеЛицаАдресЭлектроннойПочты.Количество() > 0 Тогда
			
			Объект.ВидКонтактнойИнформацииКонтактногоЛицаДляПисем = 
			СтруктураСписковВыбора.КонтактныеЛицаАдресЭлектроннойПочты.Получить(0).Значение;
			
		КонецЕсли;
				
		Если Объект.ВидКонтактнойИнформацииПартнераДляПисем.Пустая()
			И ТребуетсяНастройкаКИПартнера
			И СтруктураСписковВыбора.ПартнерыАдресЭлектроннойПочты.Количество() > 0 Тогда
			
			Объект.ВидКонтактнойИнформацииПартнераДляПисем = 
			       СтруктураСписковВыбора.ПартнерыАдресЭлектроннойПочты.Получить(0).Значение;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция НайтиСоздатьПредопределеннуюГруппуОповещений(ВидыОповещений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыРассылокИОповещений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ГруппыРассылокИОповещений КАК ГруппыРассылокИОповещений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОповещенийКлиентам КАК ВидыОповещенийКлиентам
		|		ПО (ВидыОповещенийКлиентам.ГруппаРассылокИОповещений = ГруппыРассылокИОповещений.Ссылка)
		|ГДЕ
		|	ГруппыРассылокИОповещений.Наименование ПОДОБНО &Наименование
		|	И ВидыОповещенийКлиентам.Ссылка В(&ВидыОповещений)
		|";
	
	Запрос.УстановитьПараметр("Наименование",	"%Оповещения по заказам клиентов%");
	Запрос.УстановитьПараметр("ВидыОповещений", ВидыОповещений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ГруппаОповещений = Справочники.ГруппыРассылокИОповещений.СоздатьЭлемент();
		ГруппаОповещений.Наименование									= "Оповещения по заказам клиентов";
		ГруппаОповещений.Ответственный									= Пользователи.АвторизованныйПользователь();
		ГруппаОповещений.ОтправлятьКонтактномуЛицуОбъектаОповещения 	= Истина;
		ГруппаОповещений.ПредназначенаДляЭлектронныхПисем				= Истина;
		ГруппаОповещений.ПредназначенаДляSMS							= Истина;
		ГруппаОповещений.ОтправлятьПартнеру								= Истина;
		ГруппаОповещений.Принудительная									= Истина;
		ЗаполнитьВидыКИПоУмолчанию(ГруппаОповещений);
		ГруппаОповещений.Записать();
		ГруппаОповещенийСсылка = ГруппаОповещений.Ссылка;
	Иначе	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ГруппаОповещенийСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ВидОповещения Из ВидыОповещений Цикл
		ВидОповещенияОбъект = ВидОповещения.ПолучитьОбъект();
		ВидОповещенияОбъект.ГруппаРассылокИОповещений = ГруппаОповещенийСсылка;
		ВидОповещенияОбъект.Записать();
	КонецЦикла;
	
КонецФункции

#КонецОбласти
//ОООООООООООООООООООООООООООООООО СОЗДАНИЕ ПРЕДОПРЕДЕЛЕННЫХ ШАБЛОНОВ СООБЩЕНИЙ КОНЕЦ

//ОООООООООООООООООООООООООООООООО ПРОВЕРКА НАЛИЧИЯ СОЗДАННЫХ ОБЪЕКТОВ НАЧАЛО
Функция ДокументСозданСИспользованиемПредопределенногоШабонаСообщения(ОбъектСсылка) Экспорт
	
	ВидОповещенияНайден = Ложь;
	
	СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить("Обработка.ОповещенияПриРаботеСЗаказами.Форма.Форма","СтруктураНастроек");
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		ТаблицаШаблонов = СтруктураНастроек.ТаблицаШаблонов;
		Комментарий = СтрЗаменить(ОбъектСсылка.Комментарий, НСтр("ru = 'Создано и отправлено по шаблону'") + " - ","");
		СтруктураПоиска = Новый Структура("НаименованиеШаблона", Комментарий);
		МассивДействующихВидовОповещений = ТаблицаШаблонов.НайтиСтроки(СтруктураПоиска);
		Если МассивДействующихВидовОповещений.Количество() > 0 Тогда
			ВидОповещенияНайден = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидОповещенияНайден;
	
КонецФункции

Функция ЭтоПредопределеннаяГруппаРассылокИОповещений(ОбъектСсылка) Экспорт
	
	ГруппаРассылокИОповещенийНайдена = Ложь;
	
	СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить("Обработка.ОповещенияПриРаботеСЗаказами.Форма.Форма","СтруктураНастроек");
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		ТаблицаШаблонов = СтруктураНастроек.ТаблицаШаблонов;
		СтруктураПоиска = Новый Структура("ГруппаРассылокИОповещений", ОбъектСсылка);
		МассивДействующихГруппаРассылокИОповещений = ТаблицаШаблонов.НайтиСтроки(СтруктураПоиска);
		Если МассивДействующихГруппаРассылокИОповещений.Количество() > 0 Тогда
			ГруппаРассылокИОповещенийНайдена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ГруппаРассылокИОповещенийНайдена;
	
КонецФункции

Функция ЭтоПредопределенныйВидОповещения(ОбъектСсылка) Экспорт
	
	ВидОповещенияНайден = Ложь;
	
	СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить("Обработка.ОповещенияПриРаботеСЗаказами.Форма.Форма","СтруктураНастроек");
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		ТаблицаШаблонов = СтруктураНастроек.ТаблицаШаблонов;
		СтруктураПоиска = Новый Структура("ВидОповещения", ОбъектСсылка);
		МассивДействующихВидовОповещений = ТаблицаШаблонов.НайтиСтроки(СтруктураПоиска);
		Если МассивДействующихВидовОповещений.Количество() > 0 Тогда
			ВидОповещенияНайден = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидОповещенияНайден;
	
КонецФункции

Функция СкорректироватьСписокГеквизитовШабонаСообщения(Реквизиты, ОбъектСсылка) Экспорт
	
	ШаблонНайден = Ложь;
	
	СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить("Обработка.ОповещенияПриРаботеСЗаказами.Форма.Форма","СтруктураНастроек");
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		ТаблицаШаблонов = СтруктураНастроек.ТаблицаШаблонов;
		СтруктураПоискаШаблона = Новый Структура("Шаблон", ОбъектСсылка);
		МассивДействующихШаблонов = ТаблицаШаблонов.НайтиСтроки(СтруктураПоискаШаблона);
		Если МассивДействующихШаблонов.Количество() > 0 Тогда
			ЭтоОплата = Истина;
			Если 	  СокрЛП(ОбъектСсылка.Наименование) = "Товары по заказу клиента готовы (SMS клиенту)" Тогда
				ЭтоОплата = Ложь;
			ИначеЕсли СокрЛП(ОбъектСсылка.Наименование) = "Товары по заказу клиента готовы (SMS менеджеру)" Тогда
				ЭтоОплата = Ложь;
			ИначеЕсли СокрЛП(ОбъектСсылка.Наименование) = "Товары по заказу клиента готовы (письмо клиенту)" Тогда
				ЭтоОплата = Ложь;
			ИначеЕсли СокрЛП(ОбъектСсылка.Наименование) = "Товары по заказу клиента готовы (письмо менеджеру)" Тогда
				ЭтоОплата = Ложь;
			КонецЕсли;
			ШаблонНайден = Истина;
			Если ТипЗнч(Реквизиты) = Тип("ДанныеФормыДерево") Тогда
				РеквизитыШаблона = Реквизиты.ПолучитьЭлементы();
				КоличествоРеквизитов = РеквизитыШаблона.Количество();
				Пока КоличествоРеквизитов > 0 Цикл
					КоличествоРеквизитов = КоличествоРеквизитов - 1;
					РеквизитШаблона = РеквизитыШаблона[КоличествоРеквизитов];
					Если СокрЛП(РеквизитШаблона.Имя) = "ЗаказКлиента" Тогда
						ДочерниеРеквизиты = РеквизитШаблона.ПолучитьЭлементы();	
						ОбратныйИндекс = ДочерниеРеквизиты.Количество();
						Пока ОбратныйИндекс > 0 Цикл
							ОбратныйИндекс = ОбратныйИндекс - 1;
							ДочернийРеквизит = ДочерниеРеквизиты[ОбратныйИндекс];
							Если (ЭтоОплата И (СокрЛП(ДочернийРеквизит.Имя)    = "ЗаказКлиента.СуммаОплачено"))
								ИЛИ (СокрЛП(ДочернийРеквизит.Имя) = "ЗаказКлиента.КонтактноеЛицоНаименование")
								ИЛИ (ЭтоОплата И (СокрЛП(ДочернийРеквизит.Имя) = "ЗаказКлиента.ОставщийсяДолгКлиента"))
								ИЛИ (СокрЛП(ДочернийРеквизит.Имя) = "ЗаказКлиента.Менеджер")
								ИЛИ (СокрЛП(ДочернийРеквизит.Имя) = "ЗаказКлиента.Номер")
								ИЛИ (СокрЛП(ДочернийРеквизит.Имя) = "ЗаказКлиента.Дата") Тогда
								Продолжить;
							КонецЕсли;
							ДочерниеРеквизиты.Удалить(ОбратныйИндекс);
						КонецЦикла;
						НоваяСтрока					= ДочерниеРеквизиты.Добавить();
						НоваяСтрока.Имя				= "ЗаказКлиента.ТелефонОрганизации";
						НоваяСтрока.Представление	= "Телефон организации";
						НоваяСтрока.ИндексКартинки	= 3;
						Если ЭтоОплата Тогда
							НоваяСтрока					= ДочерниеРеквизиты.Добавить();
							НоваяСтрока.Имя				= "ЗаказКлиента.ДатаОплаты";
							НоваяСтрока.Представление	= "Дата оплаты";
							НоваяСтрока.ИндексКартинки	= 3;
						Иначе	
							НоваяСтрока					= ДочерниеРеквизиты.Добавить();
							НоваяСтрока.Имя				= "ЗаказКлиента.ДнейБесплатногоХранения";
							НоваяСтрока.Представление	= "Дней бесплатного хранения товаров";
							НоваяСтрока.ИндексКартинки	= 3;
						КонецЕсли;
					Иначе	
						РеквизитыШаблона.Удалить(КоличествоРеквизитов);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(Реквизиты) = Тип("КоллекцияСтрокДереваЗначений") Тогда
				Для Каждого Реквизит Из Реквизиты Цикл
					Если СокрЛП(Реквизит.Имя) = "ЗаказКлиента" Тогда
						СтрокиРеквизита = Реквизит.Строки;
						ОбратныйИндекс = СтрокиРеквизита.Количество();
						Пока ОбратныйИндекс > 0 Цикл
							ОбратныйИндекс = ОбратныйИндекс - 1;
							СтрокаРеквизита = СтрокиРеквизита[ОбратныйИндекс];
							Если (ЭтоОплата И (СокрЛП(СтрокаРеквизита.Имя) 	  = "ЗаказКлиента.СуммаОплачено"))
								ИЛИ (СокрЛП(СтрокаРеквизита.Имя) = "ЗаказКлиента.КонтактноеЛицоНаименование")
								ИЛИ (ЭтоОплата И (СокрЛП(СтрокаРеквизита.Имя) = "ЗаказКлиента.ОставщийсяДолгКлиента"))
								ИЛИ (СокрЛП(СтрокаРеквизита.Имя) = "ЗаказКлиента.Менеджер")
								ИЛИ (СокрЛП(СтрокаРеквизита.Имя) = "ЗаказКлиента.Номер")
								ИЛИ (СокрЛП(СтрокаРеквизита.Имя) = "ЗаказКлиента.Дата") Тогда
								Продолжить;
							КонецЕсли;
							СтрокиРеквизита.Удалить(ОбратныйИндекс);
						КонецЦикла;
						НоваяСтрока						= СтрокиРеквизита.Добавить();
						НоваяСтрока.Имя					= "ЗаказКлиента.ТелефонОрганизации";
						НоваяСтрока.Представление		= "Телефон организации";
						Если ЭтоОплата Тогда
							НоваяСтрока					= СтрокиРеквизита.Добавить();
							НоваяСтрока.Имя				= "ЗаказКлиента.ДатаОплаты";
							НоваяСтрока.Представление	= "Дата оплаты";
						Иначе	
							НоваяСтрока					= СтрокиРеквизита.Добавить();
							НоваяСтрока.Имя				= "ЗаказКлиента.ДнейБесплатногоХранения";
							НоваяСтрока.Представление	= "Дней бесплатного хранения товаров";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ШаблонНайден;
	
КонецФункции
//ОООООООООООООООООООООООООООООООО ПРОВЕРКА НАЛИЧИЯ СОЗДАННЫХ ОБЪЕКТОВ КОНЕЦ

// Функция проверяет необходимость расчета скидок объекта
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - проверяемый объект
//  УправляемыеСкидки - СписокЗначений - список управляемых скидок
//  ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы
//  РассчитанныеСкидкиАдресВХранилище - Строка - адрес хранилища, куда будут помещены рассчитанные скидки/наценки.
//
Функция НеобходимПерерасчетСкидок(Объект, УправляемыеСкидки, ИдентификаторФормы, РассчитанныеСкидкиАдресВХранилище) Экспорт
	
	СкидкиИзменились = Ложь;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ПрименятьКОбъекту",                Ложь);
	ПараметрыРасчета.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	ПараметрыРасчета.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	ПараметрыРасчета.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	РассчитанныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, ПараметрыРасчета);
	
	КоличествоСтрокАктуальныхСкидок = РассчитанныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрокАктуальныхСкидок <> Объект.СкидкиНаценки.Количество() Тогда 
		СкидкиИзменились = Истина;
	Иначе
		
		Для НомерСтроки = 1 По КоличествоСтрокАктуальныхСкидок Цикл
			СтрокаТекущиеСкидки      = Объект.СкидкиНаценки[НомерСтроки-1];
			СтрокаРассчитанныеСкидки = РассчитанныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1];
			
			Если    СтрокаТекущиеСкидки.Сумма          <> СтрокаРассчитанныеСкидки.Сумма
				ИЛИ СтрокаТекущиеСкидки.КлючСвязи      <> СтрокаРассчитанныеСкидки.КлючСвязи
				ИЛИ СтрокаТекущиеСкидки.СкидкаНаценка  <> СтрокаРассчитанныеСкидки.СкидкаНаценка
				ИЛИ СтрокаТекущиеСкидки.НапомнитьПозже <> СтрокаРассчитанныеСкидки.НапомнитьПозже Тогда
				СкидкиИзменились = Истина;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//Если СкидкиИзменились И (ИдентификаторФормы <> Неопределено) Тогда
		РассчитанныеСкидкиАдресВХранилище = ПоместитьВоВременноеХранилище(РассчитанныеСкидки, ИдентификаторФормы);
	//КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

